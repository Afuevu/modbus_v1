
f103_rs485_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001cc0  08001cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d6c  08001d6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001d6c  08001d6c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d6c  08001d6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d6c  08001d6c  00011d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d70  08001d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000070  08001de4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001de4  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003973  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000142b  00000000  00000000  00023a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004d0  00000000  00000000  00024e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00025308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b9d  00000000  00000000  00025700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b67  00000000  00000000  0003c29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fbe2  00000000  00000000  00042e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c29e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013e4  00000000  00000000  000c2a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ca8 	.word	0x08001ca8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001ca8 	.word	0x08001ca8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f914 	bl	800037c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f805 	bl	8000162 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f848 	bl	80001ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
main_app();
 800015c:	f000 fe32 	bl	8000dc4 <main_app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000160:	e7fe      	b.n	8000160 <main+0x14>

08000162 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000162:	b580      	push	{r7, lr}
 8000164:	b090      	sub	sp, #64	; 0x40
 8000166:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000168:	f107 0318 	add.w	r3, r7, #24
 800016c:	2228      	movs	r2, #40	; 0x28
 800016e:	2100      	movs	r1, #0
 8000170:	4618      	mov	r0, r3
 8000172:	f001 f925 	bl	80013c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000176:	1d3b      	adds	r3, r7, #4
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
 800017c:	605a      	str	r2, [r3, #4]
 800017e:	609a      	str	r2, [r3, #8]
 8000180:	60da      	str	r2, [r3, #12]
 8000182:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000184:	2301      	movs	r3, #1
 8000186:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800018c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800018e:	2300      	movs	r3, #0
 8000190:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000192:	2301      	movs	r3, #1
 8000194:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000196:	2302      	movs	r3, #2
 8000198:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800019a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 fa2c 	bl	8000608 <HAL_RCC_OscConfig>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001b6:	f000 f82f 	bl	8000218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ba:	230f      	movs	r3, #15
 80001bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001be:	2302      	movs	r3, #2
 80001c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2102      	movs	r1, #2
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 fc99 	bl	8000b0c <HAL_RCC_ClockConfig>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d001      	beq.n	80001e4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e0:	f000 f81a 	bl	8000218 <Error_Handler>
  }
}
 80001e4:	bf00      	nop
 80001e6:	3740      	adds	r7, #64	; 0x40
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}

080001ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <MX_GPIO_Init+0x28>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <MX_GPIO_Init+0x28>)
 80001f8:	f043 0320 	orr.w	r3, r3, #32
 80001fc:	6193      	str	r3, [r2, #24]
 80001fe:	4b05      	ldr	r3, [pc, #20]	; (8000214 <MX_GPIO_Init+0x28>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	f003 0320 	and.w	r3, r3, #32
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	687b      	ldr	r3, [r7, #4]

}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40021000 	.word	0x40021000

08000218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800021c:	b672      	cpsid	i
}
 800021e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000220:	e7fe      	b.n	8000220 <Error_Handler+0x8>
	...

08000224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <HAL_MspInit+0x40>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <HAL_MspInit+0x40>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <HAL_MspInit+0x40>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <HAL_MspInit+0x40>)
 8000244:	69db      	ldr	r3, [r3, #28]
 8000246:	4a07      	ldr	r2, [pc, #28]	; (8000264 <HAL_MspInit+0x40>)
 8000248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800024c:	61d3      	str	r3, [r2, #28]
 800024e:	4b05      	ldr	r3, [pc, #20]	; (8000264 <HAL_MspInit+0x40>)
 8000250:	69db      	ldr	r3, [r3, #28]
 8000252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000256:	603b      	str	r3, [r7, #0]
 8000258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40021000 	.word	0x40021000

08000268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800026c:	e7fe      	b.n	800026c <NMI_Handler+0x4>

0800026e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000272:	e7fe      	b.n	8000272 <HardFault_Handler+0x4>

08000274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000278:	e7fe      	b.n	8000278 <MemManage_Handler+0x4>

0800027a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800027e:	e7fe      	b.n	800027e <BusFault_Handler+0x4>

08000280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000284:	e7fe      	b.n	8000284 <UsageFault_Handler+0x4>

08000286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr

08000292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr

0800029e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr

080002aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002aa:	b580      	push	{r7, lr}
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002ae:	f000 f8ab 	bl	8000408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002c0:	4a14      	ldr	r2, [pc, #80]	; (8000314 <_sbrk+0x5c>)
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <_sbrk+0x60>)
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <_sbrk+0x64>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d102      	bne.n	80002da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <_sbrk+0x64>)
 80002d6:	4a12      	ldr	r2, [pc, #72]	; (8000320 <_sbrk+0x68>)
 80002d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <_sbrk+0x64>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4413      	add	r3, r2
 80002e2:	693a      	ldr	r2, [r7, #16]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d207      	bcs.n	80002f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80002e8:	f001 f832 	bl	8001350 <__errno>
 80002ec:	4603      	mov	r3, r0
 80002ee:	220c      	movs	r2, #12
 80002f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002f6:	e009      	b.n	800030c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80002f8:	4b08      	ldr	r3, [pc, #32]	; (800031c <_sbrk+0x64>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <_sbrk+0x64>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4413      	add	r3, r2
 8000306:	4a05      	ldr	r2, [pc, #20]	; (800031c <_sbrk+0x64>)
 8000308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800030a:	68fb      	ldr	r3, [r7, #12]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3718      	adds	r7, #24
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20005000 	.word	0x20005000
 8000318:	00000400 	.word	0x00000400
 800031c:	2000008c 	.word	0x2000008c
 8000320:	200000b8 	.word	0x200000b8

08000324 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000330:	f7ff fff8 	bl	8000324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480b      	ldr	r0, [pc, #44]	; (8000364 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000336:	490c      	ldr	r1, [pc, #48]	; (8000368 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000338:	4a0c      	ldr	r2, [pc, #48]	; (800036c <LoopFillZerobss+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a09      	ldr	r2, [pc, #36]	; (8000370 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800034c:	4c09      	ldr	r4, [pc, #36]	; (8000374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800035a:	f000 ffff 	bl	800135c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff fef5 	bl	800014c <main>
  bx lr
 8000362:	4770      	bx	lr
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800036c:	08001d74 	.word	0x08001d74
  ldr r2, =_sbss
 8000370:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000374:	200000b8 	.word	0x200000b8

08000378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC1_2_IRQHandler>
	...

0800037c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000380:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <HAL_Init+0x28>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <HAL_Init+0x28>)
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800038c:	2003      	movs	r0, #3
 800038e:	f000 f907 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000392:	200f      	movs	r0, #15
 8000394:	f000 f808 	bl	80003a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000398:	f7ff ff44 	bl	8000224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800039c:	2300      	movs	r3, #0
}
 800039e:	4618      	mov	r0, r3
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40022000 	.word	0x40022000

080003a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <HAL_InitTick+0x54>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <HAL_InitTick+0x58>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003be:	fbb3 f3f1 	udiv	r3, r3, r1
 80003c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f911 	bl	80005ee <HAL_SYSTICK_Config>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003d2:	2301      	movs	r3, #1
 80003d4:	e00e      	b.n	80003f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2b0f      	cmp	r3, #15
 80003da:	d80a      	bhi.n	80003f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003dc:	2200      	movs	r2, #0
 80003de:	6879      	ldr	r1, [r7, #4]
 80003e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003e4:	f000 f8e7 	bl	80005b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003e8:	4a06      	ldr	r2, [pc, #24]	; (8000404 <HAL_InitTick+0x5c>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003ee:	2300      	movs	r3, #0
 80003f0:	e000      	b.n	80003f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003f2:	2301      	movs	r3, #1
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000000 	.word	0x20000000
 8000400:	20000008 	.word	0x20000008
 8000404:	20000004 	.word	0x20000004

08000408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <HAL_IncTick+0x1c>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	461a      	mov	r2, r3
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <HAL_IncTick+0x20>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4413      	add	r3, r2
 8000418:	4a03      	ldr	r2, [pc, #12]	; (8000428 <HAL_IncTick+0x20>)
 800041a:	6013      	str	r3, [r2, #0]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	20000008 	.word	0x20000008
 8000428:	20000090 	.word	0x20000090

0800042c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  return uwTick;
 8000430:	4b02      	ldr	r3, [pc, #8]	; (800043c <HAL_GetTick+0x10>)
 8000432:	681b      	ldr	r3, [r3, #0]
}
 8000434:	4618      	mov	r0, r3
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	20000090 	.word	0x20000090

08000440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	f003 0307 	and.w	r3, r3, #7
 800044e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <__NVIC_SetPriorityGrouping+0x44>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000456:	68ba      	ldr	r2, [r7, #8]
 8000458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800045c:	4013      	ands	r3, r2
 800045e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800046c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000472:	4a04      	ldr	r2, [pc, #16]	; (8000484 <__NVIC_SetPriorityGrouping+0x44>)
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	60d3      	str	r3, [r2, #12]
}
 8000478:	bf00      	nop
 800047a:	3714      	adds	r7, #20
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	e000ed00 	.word	0xe000ed00

08000488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <__NVIC_GetPriorityGrouping+0x18>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	0a1b      	lsrs	r3, r3, #8
 8000492:	f003 0307 	and.w	r3, r3, #7
}
 8000496:	4618      	mov	r0, r3
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000ed00 	.word	0xe000ed00

080004a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	6039      	str	r1, [r7, #0]
 80004ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	db0a      	blt.n	80004ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	490c      	ldr	r1, [pc, #48]	; (80004f0 <__NVIC_SetPriority+0x4c>)
 80004be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c2:	0112      	lsls	r2, r2, #4
 80004c4:	b2d2      	uxtb	r2, r2
 80004c6:	440b      	add	r3, r1
 80004c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004cc:	e00a      	b.n	80004e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4908      	ldr	r1, [pc, #32]	; (80004f4 <__NVIC_SetPriority+0x50>)
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f003 030f 	and.w	r3, r3, #15
 80004da:	3b04      	subs	r3, #4
 80004dc:	0112      	lsls	r2, r2, #4
 80004de:	b2d2      	uxtb	r2, r2
 80004e0:	440b      	add	r3, r1
 80004e2:	761a      	strb	r2, [r3, #24]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000e100 	.word	0xe000e100
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b089      	sub	sp, #36	; 0x24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f003 0307 	and.w	r3, r3, #7
 800050a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	f1c3 0307 	rsb	r3, r3, #7
 8000512:	2b04      	cmp	r3, #4
 8000514:	bf28      	it	cs
 8000516:	2304      	movcs	r3, #4
 8000518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	3304      	adds	r3, #4
 800051e:	2b06      	cmp	r3, #6
 8000520:	d902      	bls.n	8000528 <NVIC_EncodePriority+0x30>
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	3b03      	subs	r3, #3
 8000526:	e000      	b.n	800052a <NVIC_EncodePriority+0x32>
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800052c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000530:	69bb      	ldr	r3, [r7, #24]
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	43da      	mvns	r2, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	401a      	ands	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	43d9      	mvns	r1, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000550:	4313      	orrs	r3, r2
         );
}
 8000552:	4618      	mov	r0, r3
 8000554:	3724      	adds	r7, #36	; 0x24
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3b01      	subs	r3, #1
 8000568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800056c:	d301      	bcc.n	8000572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800056e:	2301      	movs	r3, #1
 8000570:	e00f      	b.n	8000592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <SysTick_Config+0x40>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3b01      	subs	r3, #1
 8000578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800057a:	210f      	movs	r1, #15
 800057c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000580:	f7ff ff90 	bl	80004a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <SysTick_Config+0x40>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <SysTick_Config+0x40>)
 800058c:	2207      	movs	r2, #7
 800058e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	e000e010 	.word	0xe000e010

080005a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff ff49 	bl	8000440 <__NVIC_SetPriorityGrouping>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	4603      	mov	r3, r0
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005c8:	f7ff ff5e 	bl	8000488 <__NVIC_GetPriorityGrouping>
 80005cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	6978      	ldr	r0, [r7, #20]
 80005d4:	f7ff ff90 	bl	80004f8 <NVIC_EncodePriority>
 80005d8:	4602      	mov	r2, r0
 80005da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005de:	4611      	mov	r1, r2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ff5f 	bl	80004a4 <__NVIC_SetPriority>
}
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff ffb0 	bl	800055c <SysTick_Config>
 80005fc:	4603      	mov	r3, r0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	e272      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	2b00      	cmp	r3, #0
 8000624:	f000 8087 	beq.w	8000736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000628:	4b92      	ldr	r3, [pc, #584]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	f003 030c 	and.w	r3, r3, #12
 8000630:	2b04      	cmp	r3, #4
 8000632:	d00c      	beq.n	800064e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000634:	4b8f      	ldr	r3, [pc, #572]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	f003 030c 	and.w	r3, r3, #12
 800063c:	2b08      	cmp	r3, #8
 800063e:	d112      	bne.n	8000666 <HAL_RCC_OscConfig+0x5e>
 8000640:	4b8c      	ldr	r3, [pc, #560]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800064c:	d10b      	bne.n	8000666 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800064e:	4b89      	ldr	r3, [pc, #548]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	2b00      	cmp	r3, #0
 8000658:	d06c      	beq.n	8000734 <HAL_RCC_OscConfig+0x12c>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d168      	bne.n	8000734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e24c      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800066e:	d106      	bne.n	800067e <HAL_RCC_OscConfig+0x76>
 8000670:	4b80      	ldr	r3, [pc, #512]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a7f      	ldr	r2, [pc, #508]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	e02e      	b.n	80006dc <HAL_RCC_OscConfig+0xd4>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10c      	bne.n	80006a0 <HAL_RCC_OscConfig+0x98>
 8000686:	4b7b      	ldr	r3, [pc, #492]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a7a      	ldr	r2, [pc, #488]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 800068c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	4b78      	ldr	r3, [pc, #480]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a77      	ldr	r2, [pc, #476]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069c:	6013      	str	r3, [r2, #0]
 800069e:	e01d      	b.n	80006dc <HAL_RCC_OscConfig+0xd4>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006a8:	d10c      	bne.n	80006c4 <HAL_RCC_OscConfig+0xbc>
 80006aa:	4b72      	ldr	r3, [pc, #456]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a71      	ldr	r2, [pc, #452]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 80006b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	4b6f      	ldr	r3, [pc, #444]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a6e      	ldr	r2, [pc, #440]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 80006bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c0:	6013      	str	r3, [r2, #0]
 80006c2:	e00b      	b.n	80006dc <HAL_RCC_OscConfig+0xd4>
 80006c4:	4b6b      	ldr	r3, [pc, #428]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a6a      	ldr	r2, [pc, #424]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 80006ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b68      	ldr	r3, [pc, #416]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a67      	ldr	r2, [pc, #412]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 80006d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d013      	beq.n	800070c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006e4:	f7ff fea2 	bl	800042c <HAL_GetTick>
 80006e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006ea:	e008      	b.n	80006fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80006ec:	f7ff fe9e 	bl	800042c <HAL_GetTick>
 80006f0:	4602      	mov	r2, r0
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	2b64      	cmp	r3, #100	; 0x64
 80006f8:	d901      	bls.n	80006fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80006fa:	2303      	movs	r3, #3
 80006fc:	e200      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006fe:	4b5d      	ldr	r3, [pc, #372]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0f0      	beq.n	80006ec <HAL_RCC_OscConfig+0xe4>
 800070a:	e014      	b.n	8000736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800070c:	f7ff fe8e 	bl	800042c <HAL_GetTick>
 8000710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000712:	e008      	b.n	8000726 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000714:	f7ff fe8a 	bl	800042c <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	2b64      	cmp	r3, #100	; 0x64
 8000720:	d901      	bls.n	8000726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000722:	2303      	movs	r3, #3
 8000724:	e1ec      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000726:	4b53      	ldr	r3, [pc, #332]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f0      	bne.n	8000714 <HAL_RCC_OscConfig+0x10c>
 8000732:	e000      	b.n	8000736 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	2b00      	cmp	r3, #0
 8000740:	d063      	beq.n	800080a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000742:	4b4c      	ldr	r3, [pc, #304]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f003 030c 	and.w	r3, r3, #12
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00b      	beq.n	8000766 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800074e:	4b49      	ldr	r3, [pc, #292]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	f003 030c 	and.w	r3, r3, #12
 8000756:	2b08      	cmp	r3, #8
 8000758:	d11c      	bne.n	8000794 <HAL_RCC_OscConfig+0x18c>
 800075a:	4b46      	ldr	r3, [pc, #280]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000762:	2b00      	cmp	r3, #0
 8000764:	d116      	bne.n	8000794 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000766:	4b43      	ldr	r3, [pc, #268]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	2b00      	cmp	r3, #0
 8000770:	d005      	beq.n	800077e <HAL_RCC_OscConfig+0x176>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d001      	beq.n	800077e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	e1c0      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800077e:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	4939      	ldr	r1, [pc, #228]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 800078e:	4313      	orrs	r3, r2
 8000790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000792:	e03a      	b.n	800080a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	691b      	ldr	r3, [r3, #16]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d020      	beq.n	80007de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800079c:	4b36      	ldr	r3, [pc, #216]	; (8000878 <HAL_RCC_OscConfig+0x270>)
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007a2:	f7ff fe43 	bl	800042c <HAL_GetTick>
 80007a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007a8:	e008      	b.n	80007bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007aa:	f7ff fe3f 	bl	800042c <HAL_GetTick>
 80007ae:	4602      	mov	r2, r0
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d901      	bls.n	80007bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80007b8:	2303      	movs	r3, #3
 80007ba:	e1a1      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007bc:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f003 0302 	and.w	r3, r3, #2
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f0      	beq.n	80007aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	4927      	ldr	r1, [pc, #156]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 80007d8:	4313      	orrs	r3, r2
 80007da:	600b      	str	r3, [r1, #0]
 80007dc:	e015      	b.n	800080a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <HAL_RCC_OscConfig+0x270>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007e4:	f7ff fe22 	bl	800042c <HAL_GetTick>
 80007e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007ea:	e008      	b.n	80007fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007ec:	f7ff fe1e 	bl	800042c <HAL_GetTick>
 80007f0:	4602      	mov	r2, r0
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d901      	bls.n	80007fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80007fa:	2303      	movs	r3, #3
 80007fc:	e180      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1f0      	bne.n	80007ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	2b00      	cmp	r3, #0
 8000814:	d03a      	beq.n	800088c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d019      	beq.n	8000852 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <HAL_RCC_OscConfig+0x274>)
 8000820:	2201      	movs	r2, #1
 8000822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000824:	f7ff fe02 	bl	800042c <HAL_GetTick>
 8000828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800082a:	e008      	b.n	800083e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800082c:	f7ff fdfe 	bl	800042c <HAL_GetTick>
 8000830:	4602      	mov	r2, r0
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	2b02      	cmp	r3, #2
 8000838:	d901      	bls.n	800083e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800083a:	2303      	movs	r3, #3
 800083c:	e160      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_RCC_OscConfig+0x26c>)
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f0      	beq.n	800082c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800084a:	2001      	movs	r0, #1
 800084c:	f000 fa9c 	bl	8000d88 <RCC_Delay>
 8000850:	e01c      	b.n	800088c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_RCC_OscConfig+0x274>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000858:	f7ff fde8 	bl	800042c <HAL_GetTick>
 800085c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800085e:	e00f      	b.n	8000880 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000860:	f7ff fde4 	bl	800042c <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	2b02      	cmp	r3, #2
 800086c:	d908      	bls.n	8000880 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800086e:	2303      	movs	r3, #3
 8000870:	e146      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	42420000 	.word	0x42420000
 800087c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000880:	4b92      	ldr	r3, [pc, #584]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000884:	f003 0302 	and.w	r3, r3, #2
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1e9      	bne.n	8000860 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	2b00      	cmp	r3, #0
 8000896:	f000 80a6 	beq.w	80009e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800089e:	4b8b      	ldr	r3, [pc, #556]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10d      	bne.n	80008c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b88      	ldr	r3, [pc, #544]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4a87      	ldr	r2, [pc, #540]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	61d3      	str	r3, [r2, #28]
 80008b6:	4b85      	ldr	r3, [pc, #532]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80008c2:	2301      	movs	r3, #1
 80008c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008c6:	4b82      	ldr	r3, [pc, #520]	; (8000ad0 <HAL_RCC_OscConfig+0x4c8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d118      	bne.n	8000904 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008d2:	4b7f      	ldr	r3, [pc, #508]	; (8000ad0 <HAL_RCC_OscConfig+0x4c8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a7e      	ldr	r2, [pc, #504]	; (8000ad0 <HAL_RCC_OscConfig+0x4c8>)
 80008d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80008de:	f7ff fda5 	bl	800042c <HAL_GetTick>
 80008e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008e4:	e008      	b.n	80008f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008e6:	f7ff fda1 	bl	800042c <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b64      	cmp	r3, #100	; 0x64
 80008f2:	d901      	bls.n	80008f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80008f4:	2303      	movs	r3, #3
 80008f6:	e103      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008f8:	4b75      	ldr	r3, [pc, #468]	; (8000ad0 <HAL_RCC_OscConfig+0x4c8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0f0      	beq.n	80008e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d106      	bne.n	800091a <HAL_RCC_OscConfig+0x312>
 800090c:	4b6f      	ldr	r3, [pc, #444]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 800090e:	6a1b      	ldr	r3, [r3, #32]
 8000910:	4a6e      	ldr	r2, [pc, #440]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6213      	str	r3, [r2, #32]
 8000918:	e02d      	b.n	8000976 <HAL_RCC_OscConfig+0x36e>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10c      	bne.n	800093c <HAL_RCC_OscConfig+0x334>
 8000922:	4b6a      	ldr	r3, [pc, #424]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000924:	6a1b      	ldr	r3, [r3, #32]
 8000926:	4a69      	ldr	r2, [pc, #420]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000928:	f023 0301 	bic.w	r3, r3, #1
 800092c:	6213      	str	r3, [r2, #32]
 800092e:	4b67      	ldr	r3, [pc, #412]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000930:	6a1b      	ldr	r3, [r3, #32]
 8000932:	4a66      	ldr	r2, [pc, #408]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000934:	f023 0304 	bic.w	r3, r3, #4
 8000938:	6213      	str	r3, [r2, #32]
 800093a:	e01c      	b.n	8000976 <HAL_RCC_OscConfig+0x36e>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	2b05      	cmp	r3, #5
 8000942:	d10c      	bne.n	800095e <HAL_RCC_OscConfig+0x356>
 8000944:	4b61      	ldr	r3, [pc, #388]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000946:	6a1b      	ldr	r3, [r3, #32]
 8000948:	4a60      	ldr	r2, [pc, #384]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6213      	str	r3, [r2, #32]
 8000950:	4b5e      	ldr	r3, [pc, #376]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000952:	6a1b      	ldr	r3, [r3, #32]
 8000954:	4a5d      	ldr	r2, [pc, #372]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6213      	str	r3, [r2, #32]
 800095c:	e00b      	b.n	8000976 <HAL_RCC_OscConfig+0x36e>
 800095e:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000960:	6a1b      	ldr	r3, [r3, #32]
 8000962:	4a5a      	ldr	r2, [pc, #360]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000964:	f023 0301 	bic.w	r3, r3, #1
 8000968:	6213      	str	r3, [r2, #32]
 800096a:	4b58      	ldr	r3, [pc, #352]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 800096c:	6a1b      	ldr	r3, [r3, #32]
 800096e:	4a57      	ldr	r2, [pc, #348]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000970:	f023 0304 	bic.w	r3, r3, #4
 8000974:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d015      	beq.n	80009aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800097e:	f7ff fd55 	bl	800042c <HAL_GetTick>
 8000982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000984:	e00a      	b.n	800099c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000986:	f7ff fd51 	bl	800042c <HAL_GetTick>
 800098a:	4602      	mov	r2, r0
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	f241 3288 	movw	r2, #5000	; 0x1388
 8000994:	4293      	cmp	r3, r2
 8000996:	d901      	bls.n	800099c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000998:	2303      	movs	r3, #3
 800099a:	e0b1      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800099c:	4b4b      	ldr	r3, [pc, #300]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 800099e:	6a1b      	ldr	r3, [r3, #32]
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0ee      	beq.n	8000986 <HAL_RCC_OscConfig+0x37e>
 80009a8:	e014      	b.n	80009d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009aa:	f7ff fd3f 	bl	800042c <HAL_GetTick>
 80009ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009b0:	e00a      	b.n	80009c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009b2:	f7ff fd3b 	bl	800042c <HAL_GetTick>
 80009b6:	4602      	mov	r2, r0
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d901      	bls.n	80009c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80009c4:	2303      	movs	r3, #3
 80009c6:	e09b      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009c8:	4b40      	ldr	r3, [pc, #256]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 80009ca:	6a1b      	ldr	r3, [r3, #32]
 80009cc:	f003 0302 	and.w	r3, r3, #2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1ee      	bne.n	80009b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d105      	bne.n	80009e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80009da:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a3b      	ldr	r2, [pc, #236]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 80009e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f000 8087 	beq.w	8000afe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009f0:	4b36      	ldr	r3, [pc, #216]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 030c 	and.w	r3, r3, #12
 80009f8:	2b08      	cmp	r3, #8
 80009fa:	d061      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d146      	bne.n	8000a92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a04:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <HAL_RCC_OscConfig+0x4cc>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0a:	f7ff fd0f 	bl	800042c <HAL_GetTick>
 8000a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a10:	e008      	b.n	8000a24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a12:	f7ff fd0b 	bl	800042c <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d901      	bls.n	8000a24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000a20:	2303      	movs	r3, #3
 8000a22:	e06d      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f0      	bne.n	8000a12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6a1b      	ldr	r3, [r3, #32]
 8000a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a38:	d108      	bne.n	8000a4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	4921      	ldr	r1, [pc, #132]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6a19      	ldr	r1, [r3, #32]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5c:	430b      	orrs	r3, r1
 8000a5e:	491b      	ldr	r1, [pc, #108]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000a60:	4313      	orrs	r3, r2
 8000a62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_RCC_OscConfig+0x4cc>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a6a:	f7ff fcdf 	bl	800042c <HAL_GetTick>
 8000a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a70:	e008      	b.n	8000a84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a72:	f7ff fcdb 	bl	800042c <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d901      	bls.n	8000a84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000a80:	2303      	movs	r3, #3
 8000a82:	e03d      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0f0      	beq.n	8000a72 <HAL_RCC_OscConfig+0x46a>
 8000a90:	e035      	b.n	8000afe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_RCC_OscConfig+0x4cc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a98:	f7ff fcc8 	bl	800042c <HAL_GetTick>
 8000a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a9e:	e008      	b.n	8000ab2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000aa0:	f7ff fcc4 	bl	800042c <HAL_GetTick>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d901      	bls.n	8000ab2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e026      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_RCC_OscConfig+0x4c4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f0      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x498>
 8000abe:	e01e      	b.n	8000afe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d107      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e019      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40007000 	.word	0x40007000
 8000ad4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_RCC_OscConfig+0x500>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d106      	bne.n	8000afa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d001      	beq.n	8000afe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e000      	b.n	8000b00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e0d0      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b20:	4b6a      	ldr	r3, [pc, #424]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 0307 	and.w	r3, r3, #7
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d910      	bls.n	8000b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b2e:	4b67      	ldr	r3, [pc, #412]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f023 0207 	bic.w	r2, r3, #7
 8000b36:	4965      	ldr	r1, [pc, #404]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b3e:	4b63      	ldr	r3, [pc, #396]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d001      	beq.n	8000b50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e0b8      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d020      	beq.n	8000b9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d005      	beq.n	8000b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b68:	4b59      	ldr	r3, [pc, #356]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	4a58      	ldr	r2, [pc, #352]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000b72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d005      	beq.n	8000b8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b80:	4b53      	ldr	r3, [pc, #332]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4a52      	ldr	r2, [pc, #328]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000b8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b8c:	4b50      	ldr	r3, [pc, #320]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	494d      	ldr	r1, [pc, #308]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d040      	beq.n	8000c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d107      	bne.n	8000bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb2:	4b47      	ldr	r3, [pc, #284]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d115      	bne.n	8000bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e07f      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d107      	bne.n	8000bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bca:	4b41      	ldr	r3, [pc, #260]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d109      	bne.n	8000bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e073      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bda:	4b3d      	ldr	r3, [pc, #244]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e06b      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bea:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f023 0203 	bic.w	r2, r3, #3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4936      	ldr	r1, [pc, #216]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000bfc:	f7ff fc16 	bl	800042c <HAL_GetTick>
 8000c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c02:	e00a      	b.n	8000c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c04:	f7ff fc12 	bl	800042c <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e053      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 020c 	and.w	r2, r3, #12
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d1eb      	bne.n	8000c04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d210      	bcs.n	8000c5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c3a:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f023 0207 	bic.w	r2, r3, #7
 8000c42:	4922      	ldr	r1, [pc, #136]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <HAL_RCC_ClockConfig+0x1c0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d001      	beq.n	8000c5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e032      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d008      	beq.n	8000c7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4916      	ldr	r1, [pc, #88]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d009      	beq.n	8000c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c96:	4313      	orrs	r3, r2
 8000c98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c9a:	f000 f821 	bl	8000ce0 <HAL_RCC_GetSysClockFreq>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	490a      	ldr	r1, [pc, #40]	; (8000cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8000cac:	5ccb      	ldrb	r3, [r1, r3]
 8000cae:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb2:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8000cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_RCC_ClockConfig+0x1d0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fb74 	bl	80003a8 <HAL_InitTick>

  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40022000 	.word	0x40022000
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	08001d14 	.word	0x08001d14
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <HAL_RCC_GetSysClockFreq+0x94>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d002      	beq.n	8000d10 <HAL_RCC_GetSysClockFreq+0x30>
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d003      	beq.n	8000d16 <HAL_RCC_GetSysClockFreq+0x36>
 8000d0e:	e027      	b.n	8000d60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_RCC_GetSysClockFreq+0x98>)
 8000d12:	613b      	str	r3, [r7, #16]
      break;
 8000d14:	e027      	b.n	8000d66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	0c9b      	lsrs	r3, r3, #18
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d010      	beq.n	8000d50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_RCC_GetSysClockFreq+0x94>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	0c5b      	lsrs	r3, r3, #17
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000d3a:	5cd3      	ldrb	r3, [r2, r3]
 8000d3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_RCC_GetSysClockFreq+0x98>)
 8000d42:	fb03 f202 	mul.w	r2, r3, r2
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e004      	b.n	8000d5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	613b      	str	r3, [r7, #16]
      break;
 8000d5e:	e002      	b.n	8000d66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_RCC_GetSysClockFreq+0x98>)
 8000d62:	613b      	str	r3, [r7, #16]
      break;
 8000d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000d66:	693b      	ldr	r3, [r7, #16]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000
 8000d78:	007a1200 	.word	0x007a1200
 8000d7c:	08001d24 	.word	0x08001d24
 8000d80:	08001d34 	.word	0x08001d34
 8000d84:	003d0900 	.word	0x003d0900

08000d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <RCC_Delay+0x34>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <RCC_Delay+0x38>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	0a5b      	lsrs	r3, r3, #9
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	fb02 f303 	mul.w	r3, r2, r3
 8000da2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000da4:	bf00      	nop
  }
  while (Delay --);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	1e5a      	subs	r2, r3, #1
 8000daa:	60fa      	str	r2, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f9      	bne.n	8000da4 <RCC_Delay+0x1c>
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	10624dd3 	.word	0x10624dd3

08000dc4 <main_app>:
#include "main_app.h"
#include "timer4.h"
#include "uart.h"
#include "spi.h"
#include "spi_lcd.h"
int main_app(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= 1 << 3;
 8000dca:	4b39      	ldr	r3, [pc, #228]	; (8000eb0 <main_app+0xec>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	4a38      	ldr	r2, [pc, #224]	; (8000eb0 <main_app+0xec>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= ~(0x0F << 20); // pb5
 8000dd6:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <main_app+0xf0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a36      	ldr	r2, [pc, #216]	; (8000eb4 <main_app+0xf0>)
 8000ddc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000de0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x03 << 20);
 8000de2:	4b34      	ldr	r3, [pc, #208]	; (8000eb4 <main_app+0xf0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <main_app+0xf0>)
 8000de8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000dec:	6013      	str	r3, [r2, #0]

	GPIOB->CRL &= ~(0x0F << 24); // pb6
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <main_app+0xf0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <main_app+0xf0>)
 8000df4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000df8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x03 << 24);
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <main_app+0xf0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <main_app+0xf0>)
 8000e00:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000e04:	6013      	str	r3, [r2, #0]

	GPIOB->CRL &= ~(0x0F << 28); // pb7
 8000e06:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <main_app+0xf0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a2a      	ldr	r2, [pc, #168]	; (8000eb4 <main_app+0xf0>)
 8000e0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000e10:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x03 << 28);
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <main_app+0xf0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a27      	ldr	r2, [pc, #156]	; (8000eb4 <main_app+0xf0>)
 8000e18:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000e1c:	6013      	str	r3, [r2, #0]

	timer4_Init();
 8000e1e:	f000 fa55 	bl	80012cc <timer4_Init>
	//uart_init();
	spi_init();
 8000e22:	f000 f84b 	bl	8000ebc <spi_init>

	lcd_init();
 8000e26:	f000 f995 	bl	8001154 <lcd_init>
	RCC->APB2ENR |= 1 << 4;
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <main_app+0xec>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a20      	ldr	r2, [pc, #128]	; (8000eb0 <main_app+0xec>)
 8000e30:	f043 0310 	orr.w	r3, r3, #16
 8000e34:	6193      	str	r3, [r2, #24]
	GPIOC->CRH &= ~(0x0F << 20); // PC13
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <main_app+0xf4>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <main_app+0xf4>)
 8000e3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000e40:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (0x03 << 20);
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <main_app+0xf4>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <main_app+0xf4>)
 8000e48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000e4c:	6053      	str	r3, [r2, #4]
	GPIOC->ODR |= (1 << 13);
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <main_app+0xf4>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <main_app+0xf4>)
 8000e54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e58:	60d3      	str	r3, [r2, #12]
	delay_ms(1000);
 8000e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5e:	f000 f9f9 	bl	8001254 <delay_ms>

	lcd_setCursor(0, 0);
 8000e62:	2100      	movs	r1, #0
 8000e64:	2000      	movs	r0, #0
 8000e66:	f000 f98b 	bl	8001180 <lcd_setCursor>
	delay_ms(10);
 8000e6a:	200a      	movs	r0, #10
 8000e6c:	f000 f9f2 	bl	8001254 <delay_ms>
	//lcd_print('A');
	delay_ms(10);
 8000e70:	200a      	movs	r0, #10
 8000e72:	f000 f9ef 	bl	8001254 <delay_ms>
	while (1) {
		//GPIOC->ODR |= (1 << 13);
		//delay_ms(1000);
		//GPIOC->ODR &= ~(1 << 13);
		//delay_ms(1000);
		for (int i = 0; i < 100; i++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	e015      	b.n	8000ea8 <main_app+0xe4>
			lcd_setCursor(0, 0);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 f97e 	bl	8001180 <lcd_setCursor>
			delay_ms(5);
 8000e84:	2005      	movs	r0, #5
 8000e86:	f000 f9e5 	bl	8001254 <delay_ms>
			lcd_printn(i);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f9b2 	bl	80011f4 <lcd_printn>
			delay_ms(95);
 8000e90:	205f      	movs	r0, #95	; 0x5f
 8000e92:	f000 f9df 	bl	8001254 <delay_ms>
			GPIOC->ODR ^= (1 << 13);
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <main_app+0xf4>)
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <main_app+0xf4>)
 8000e9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000ea0:	60d3      	str	r3, [r2, #12]
		for (int i = 0; i < 100; i++) {
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b63      	cmp	r3, #99	; 0x63
 8000eac:	dde6      	ble.n	8000e7c <main_app+0xb8>
 8000eae:	e7e2      	b.n	8000e76 <main_app+0xb2>
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40011000 	.word	0x40011000

08000ebc <spi_init>:
#include "spi.h"

void spi_init() {
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 12);
 8000ec0:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <spi_init+0xf0>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a39      	ldr	r2, [pc, #228]	; (8000fac <spi_init+0xf0>)
 8000ec6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eca:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= 1 << 2;
 8000ecc:	4b37      	ldr	r3, [pc, #220]	; (8000fac <spi_init+0xf0>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a36      	ldr	r2, [pc, #216]	; (8000fac <spi_init+0xf0>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	6193      	str	r3, [r2, #24]
	SPI1->CR1 |= (1 << 0);
 8000ed8:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <spi_init+0xf4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a34      	ldr	r2, [pc, #208]	; (8000fb0 <spi_init+0xf4>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1 << 1);
 8000ee4:	4b32      	ldr	r3, [pc, #200]	; (8000fb0 <spi_init+0xf4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a31      	ldr	r2, [pc, #196]	; (8000fb0 <spi_init+0xf4>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1 << 2);
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <spi_init+0xf4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2e      	ldr	r2, [pc, #184]	; (8000fb0 <spi_init+0xf4>)
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (3 << 3);
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <spi_init+0xf4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2b      	ldr	r2, [pc, #172]	; (8000fb0 <spi_init+0xf4>)
 8000f02:	f043 0318 	orr.w	r3, r3, #24
 8000f06:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(1 << 7);
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <spi_init+0xf4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <spi_init+0xf4>)
 8000f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f12:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1 << 9);
 8000f14:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <spi_init+0xf4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a25      	ldr	r2, [pc, #148]	; (8000fb0 <spi_init+0xf4>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1 << 8);
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <spi_init+0xf4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <spi_init+0xf4>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(1 << 10);
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <spi_init+0xf4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1f      	ldr	r2, [pc, #124]	; (8000fb0 <spi_init+0xf4>)
 8000f32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(1 << 11);
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <spi_init+0xf4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <spi_init+0xf4>)
 8000f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f42:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~(0x0F << 20);
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <spi_init+0xf8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a1a      	ldr	r2, [pc, #104]	; (8000fb4 <spi_init+0xf8>)
 8000f4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000f4e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x0B << 20);
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <spi_init+0xf8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <spi_init+0xf8>)
 8000f56:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8000f5a:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~(0x0F << 28);
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <spi_init+0xf8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <spi_init+0xf8>)
 8000f62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000f66:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x0B << 28);
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <spi_init+0xf8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <spi_init+0xf8>)
 8000f6e:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8000f72:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~(0x0F << 24);
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <spi_init+0xf8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <spi_init+0xf8>)
 8000f7a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000f7e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1 << 26);
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <spi_init+0xf8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <spi_init+0xf8>)
 8000f86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f8a:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~(0x0F << 16);
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <spi_init+0xf8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <spi_init+0xf8>)
 8000f92:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000f96:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x03 << 16);
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <spi_init+0xf8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <spi_init+0xf8>)
 8000f9e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000fa2:	6013      	str	r3, [r2, #0]

}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40013000 	.word	0x40013000
 8000fb4:	40010800 	.word	0x40010800

08000fb8 <spi_enable>:

void spi_enable() {
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	SPI1->CR1 |= (1 << 6);
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <spi_enable+0x18>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <spi_enable+0x18>)
 8000fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	40013000 	.word	0x40013000

08000fd4 <spi_disable>:

void spi_disable() {
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	SPI1->CR1 &= ~(1 << 6);
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <spi_disable+0x18>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <spi_disable+0x18>)
 8000fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40013000 	.word	0x40013000

08000ff0 <spi_transmit>:

void spi_transmit(uint8_t data) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	while (!((SPI1->SR) & (0x02)))
 8000ffa:	bf00      	nop
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <spi_transmit+0x48>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f9      	beq.n	8000ffc <spi_transmit+0xc>
		;

	SPI1->DR = data;
 8001008:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <spi_transmit+0x48>)
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	60d3      	str	r3, [r2, #12]
	while (((SPI1->SR) & (1 << 7)))
 800100e:	bf00      	nop
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <spi_transmit+0x48>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f9      	bne.n	8001010 <spi_transmit+0x20>
		;

	uint8_t temp1 = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
	temp1 = SPI1->DR;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <spi_transmit+0x48>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	73fb      	strb	r3, [r7, #15]
	temp1 = SPI1->SR;
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <spi_transmit+0x48>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	73fb      	strb	r3, [r7, #15]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40013000 	.word	0x40013000

0800103c <lcd_write_nibble>:
char value[8] = { 0 };
uint8_t upperNibble = 0;
uint8_t lowerNibble = 0;
// LCD Commands

void lcd_write_nibble(uint8_t nibble) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	spi_enable();
 8001046:	f7ff ffb7 	bl	8000fb8 <spi_enable>
	spi_transmit(nibble);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ffcf 	bl	8000ff0 <spi_transmit>

	LATCH_ON;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <lcd_write_nibble+0x6c>)
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <lcd_write_nibble+0x6c>)
 8001058:	f043 0320 	orr.w	r3, r3, #32
 800105c:	60d3      	str	r3, [r2, #12]
	delay_ms(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f000 f8f8 	bl	8001254 <delay_ms>
	LATCH_OFF;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <lcd_write_nibble+0x6c>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <lcd_write_nibble+0x6c>)
 800106a:	f023 0320 	bic.w	r3, r3, #32
 800106e:	60d3      	str	r3, [r2, #12]
	delay_ms(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f000 f8ef 	bl	8001254 <delay_ms>
	EN_ON;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <lcd_write_nibble+0x6c>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <lcd_write_nibble+0x6c>)
 800107c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001080:	60d3      	str	r3, [r2, #12]
	delay_ms(1);
 8001082:	2001      	movs	r0, #1
 8001084:	f000 f8e6 	bl	8001254 <delay_ms>
	EN_OFF;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <lcd_write_nibble+0x6c>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <lcd_write_nibble+0x6c>)
 800108e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001092:	60d3      	str	r3, [r2, #12]
	delay_ms(1);
 8001094:	2001      	movs	r0, #1
 8001096:	f000 f8dd 	bl	8001254 <delay_ms>
	spi_disable();
 800109a:	f7ff ff9b 	bl	8000fd4 <spi_disable>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40010c00 	.word	0x40010c00

080010ac <lcd_print>:

void lcd_print(uint8_t data) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	RS_ON;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <lcd_print+0x48>)
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <lcd_print+0x48>)
 80010bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c0:	60d3      	str	r3, [r2, #12]
	upperNibble = data >> 4;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <lcd_print+0x4c>)
 80010ca:	701a      	strb	r2, [r3, #0]
	lowerNibble = data & 15;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <lcd_print+0x50>)
 80010d6:	701a      	strb	r2, [r3, #0]
	lcd_write_nibble(upperNibble);
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <lcd_print+0x4c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffad 	bl	800103c <lcd_write_nibble>
	lcd_write_nibble(lowerNibble);
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <lcd_print+0x50>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffa8 	bl	800103c <lcd_write_nibble>

}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	2000009c 	.word	0x2000009c
 80010fc:	2000009d 	.word	0x2000009d

08001100 <lcd_command>:

void lcd_command(uint8_t data) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	RS_OFF;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <lcd_command+0x48>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <lcd_command+0x48>)
 8001110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001114:	60d3      	str	r3, [r2, #12]
	upperNibble = data >> 4;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <lcd_command+0x4c>)
 800111e:	701a      	strb	r2, [r3, #0]
	lowerNibble = data & 15;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <lcd_command+0x50>)
 800112a:	701a      	strb	r2, [r3, #0]
	lcd_write_nibble(upperNibble);
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <lcd_command+0x4c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff83 	bl	800103c <lcd_write_nibble>
	lcd_write_nibble(lowerNibble);
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <lcd_command+0x50>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff7e 	bl	800103c <lcd_write_nibble>

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40010c00 	.word	0x40010c00
 800114c:	2000009c 	.word	0x2000009c
 8001150:	2000009d 	.word	0x2000009d

08001154 <lcd_init>:

void lcd_init() {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

	delay_ms(15);
 8001158:	200f      	movs	r0, #15
 800115a:	f000 f87b 	bl	8001254 <delay_ms>
	//  lcd_command(0x33); ///careful of this
	//  lcd_command(0x32); ///careful of  this
	lcd_command(0x02);
 800115e:	2002      	movs	r0, #2
 8001160:	f7ff ffce 	bl	8001100 <lcd_command>
	lcd_command(0x28);
 8001164:	2028      	movs	r0, #40	; 0x28
 8001166:	f7ff ffcb 	bl	8001100 <lcd_command>
	lcd_command(0x80);
 800116a:	2080      	movs	r0, #128	; 0x80
 800116c:	f7ff ffc8 	bl	8001100 <lcd_command>
	lcd_command(0x0C);
 8001170:	200c      	movs	r0, #12
 8001172:	f7ff ffc5 	bl	8001100 <lcd_command>
	lcd_command(0x01);
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff ffc2 	bl	8001100 <lcd_command>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <lcd_setCursor>:

void lcd_setCursor(unsigned char a, unsigned char b) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b096      	sub	sp, #88	; 0x58
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	71fb      	strb	r3, [r7, #7]
 800118c:	4613      	mov	r3, r2
 800118e:	71bb      	strb	r3, [r7, #6]

	const unsigned char row[4][20] = { { 0x80, 0x81, 0x82, 0x83, 0x84, 0x85,
 8001190:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <lcd_setCursor+0x44>)
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	4611      	mov	r1, r2
 8001198:	2250      	movs	r2, #80	; 0x50
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f902 	bl	80013a4 <memcpy>
			0xD2, 0xD3 }, { 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B,
			0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,
			0xA7 }, { 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC,
			0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7 } };

	lcd_command(row[a][b]);
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	79b9      	ldrb	r1, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	3358      	adds	r3, #88	; 0x58
 80011ae:	443b      	add	r3, r7
 80011b0:	440b      	add	r3, r1
 80011b2:	3b50      	subs	r3, #80	; 0x50
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ffa2 	bl	8001100 <lcd_command>
}
 80011bc:	bf00      	nop
 80011be:	3758      	adds	r7, #88	; 0x58
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	08001cc0 	.word	0x08001cc0

080011c8 <lcd_printf>:

void lcd_printf(char *str) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

	while (*str) {
 80011d0:	e007      	b.n	80011e2 <lcd_printf+0x1a>
		lcd_print(*str);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff68 	bl	80010ac <lcd_print>
		str++;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3301      	adds	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
	while (*str) {
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f3      	bne.n	80011d2 <lcd_printf+0xa>

	}

}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <lcd_printn>:
//    lcd_print(h+0x30);
//
//
//}

void lcd_printn(int d_numb) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

	sprintf(value, "%d", d_numb);
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4905      	ldr	r1, [pc, #20]	; (8001214 <lcd_printn+0x20>)
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <lcd_printn+0x24>)
 8001202:	f000 f8e5 	bl	80013d0 <siprintf>
	//lcd_clear();
	lcd_printf(value);
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <lcd_printn+0x24>)
 8001208:	f7ff ffde 	bl	80011c8 <lcd_printf>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08001d10 	.word	0x08001d10
 8001218:	20000094 	.word	0x20000094

0800121c <__NVIC_EnableIRQ>:
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0b      	blt.n	8001246 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	4906      	ldr	r1, [pc, #24]	; (8001250 <__NVIC_EnableIRQ+0x34>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100

08001254 <delay_ms>:
#include "timer4.h"

int timerTick = 0;

void delay_ms(int ms) {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

	timerTick = 0;
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <delay_ms+0x44>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
	TIM4->CR1 |= 1 << 0;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <delay_ms+0x48>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a0d      	ldr	r2, [pc, #52]	; (800129c <delay_ms+0x48>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6013      	str	r3, [r2, #0]
	while (timerTick<(ms*1000));
 800126e:	bf00      	nop
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001276:	fb03 f202 	mul.w	r2, r3, r2
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <delay_ms+0x44>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	dcf6      	bgt.n	8001270 <delay_ms+0x1c>
	TIM4->CR1 &= ~TIM_CR1_CEN;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <delay_ms+0x48>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <delay_ms+0x48>)
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6013      	str	r3, [r2, #0]

}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	200000a0 	.word	0x200000a0
 800129c:	40000800 	.word	0x40000800

080012a0 <TIM4_IRQHandler>:
	TIM4->CR1 &= ~TIM_CR1_CEN;


}

void TIM4_IRQHandler(void) {
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	timerTick++;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <TIM4_IRQHandler+0x24>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <TIM4_IRQHandler+0x24>)
 80012ac:	6013      	str	r3, [r2, #0]

	TIM4->SR &= ~TIM_SR_UIF;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <TIM4_IRQHandler+0x28>)
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <TIM4_IRQHandler+0x28>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6113      	str	r3, [r2, #16]
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	200000a0 	.word	0x200000a0
 80012c8:	40000800 	.word	0x40000800

080012cc <timer4_Init>:

void timer4_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0


	RCC->APB1ENR |= 1 << 2;  // timer clock enable
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <timer4_Init+0x4c>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	4a10      	ldr	r2, [pc, #64]	; (8001318 <timer4_Init+0x4c>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	61d3      	str	r3, [r2, #28]
		TIM4->PSC = 0;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <timer4_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
		TIM4->ARR = 72;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <timer4_Init+0x50>)
 80012e4:	2248      	movs	r2, #72	; 0x48
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM4->CR1 |= TIM_CR1_URS;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <timer4_Init+0x50>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <timer4_Init+0x50>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6013      	str	r3, [r2, #0]
		TIM4->DIER |= TIM_DIER_UIE;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <timer4_Init+0x50>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a08      	ldr	r2, [pc, #32]	; (800131c <timer4_Init+0x50>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	60d3      	str	r3, [r2, #12]
		TIM4->EGR |= TIM_EGR_UG;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <timer4_Init+0x50>)
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	4a05      	ldr	r2, [pc, #20]	; (800131c <timer4_Init+0x50>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6153      	str	r3, [r2, #20]
		NVIC_EnableIRQ(TIM4_IRQn);
 800130c:	201e      	movs	r0, #30
 800130e:	f7ff ff85 	bl	800121c <__NVIC_EnableIRQ>


}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	40000800 	.word	0x40000800

08001320 <USART1_IRQHandler>:
	NVIC_EnableIRQ(USART1_IRQn);

}

///////
void USART1_IRQHandler(void) {
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

	if ( USART1->SR & 0x20)
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <USART1_IRQHandler+0x28>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <USART1_IRQHandler+0x1a>
		temp = (char) USART1->DR;
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <USART1_IRQHandler+0x28>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <USART1_IRQHandler+0x2c>)
 8001338:	701a      	strb	r2, [r3, #0]

	if (USART1->SR & 0x80) {
 800133a:	4b03      	ldr	r3, [pc, #12]	; (8001348 <USART1_IRQHandler+0x28>)
 800133c:	681b      	ldr	r3, [r3, #0]

	}

}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40013800 	.word	0x40013800
 800134c:	200000a4 	.word	0x200000a4

08001350 <__errno>:
 8001350:	4b01      	ldr	r3, [pc, #4]	; (8001358 <__errno+0x8>)
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2000000c 	.word	0x2000000c

0800135c <__libc_init_array>:
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	2600      	movs	r6, #0
 8001360:	4d0c      	ldr	r5, [pc, #48]	; (8001394 <__libc_init_array+0x38>)
 8001362:	4c0d      	ldr	r4, [pc, #52]	; (8001398 <__libc_init_array+0x3c>)
 8001364:	1b64      	subs	r4, r4, r5
 8001366:	10a4      	asrs	r4, r4, #2
 8001368:	42a6      	cmp	r6, r4
 800136a:	d109      	bne.n	8001380 <__libc_init_array+0x24>
 800136c:	f000 fc9c 	bl	8001ca8 <_init>
 8001370:	2600      	movs	r6, #0
 8001372:	4d0a      	ldr	r5, [pc, #40]	; (800139c <__libc_init_array+0x40>)
 8001374:	4c0a      	ldr	r4, [pc, #40]	; (80013a0 <__libc_init_array+0x44>)
 8001376:	1b64      	subs	r4, r4, r5
 8001378:	10a4      	asrs	r4, r4, #2
 800137a:	42a6      	cmp	r6, r4
 800137c:	d105      	bne.n	800138a <__libc_init_array+0x2e>
 800137e:	bd70      	pop	{r4, r5, r6, pc}
 8001380:	f855 3b04 	ldr.w	r3, [r5], #4
 8001384:	4798      	blx	r3
 8001386:	3601      	adds	r6, #1
 8001388:	e7ee      	b.n	8001368 <__libc_init_array+0xc>
 800138a:	f855 3b04 	ldr.w	r3, [r5], #4
 800138e:	4798      	blx	r3
 8001390:	3601      	adds	r6, #1
 8001392:	e7f2      	b.n	800137a <__libc_init_array+0x1e>
 8001394:	08001d6c 	.word	0x08001d6c
 8001398:	08001d6c 	.word	0x08001d6c
 800139c:	08001d6c 	.word	0x08001d6c
 80013a0:	08001d70 	.word	0x08001d70

080013a4 <memcpy>:
 80013a4:	440a      	add	r2, r1
 80013a6:	4291      	cmp	r1, r2
 80013a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80013ac:	d100      	bne.n	80013b0 <memcpy+0xc>
 80013ae:	4770      	bx	lr
 80013b0:	b510      	push	{r4, lr}
 80013b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80013b6:	4291      	cmp	r1, r2
 80013b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80013bc:	d1f9      	bne.n	80013b2 <memcpy+0xe>
 80013be:	bd10      	pop	{r4, pc}

080013c0 <memset>:
 80013c0:	4603      	mov	r3, r0
 80013c2:	4402      	add	r2, r0
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d100      	bne.n	80013ca <memset+0xa>
 80013c8:	4770      	bx	lr
 80013ca:	f803 1b01 	strb.w	r1, [r3], #1
 80013ce:	e7f9      	b.n	80013c4 <memset+0x4>

080013d0 <siprintf>:
 80013d0:	b40e      	push	{r1, r2, r3}
 80013d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80013d6:	b500      	push	{lr}
 80013d8:	b09c      	sub	sp, #112	; 0x70
 80013da:	ab1d      	add	r3, sp, #116	; 0x74
 80013dc:	9002      	str	r0, [sp, #8]
 80013de:	9006      	str	r0, [sp, #24]
 80013e0:	9107      	str	r1, [sp, #28]
 80013e2:	9104      	str	r1, [sp, #16]
 80013e4:	4808      	ldr	r0, [pc, #32]	; (8001408 <siprintf+0x38>)
 80013e6:	4909      	ldr	r1, [pc, #36]	; (800140c <siprintf+0x3c>)
 80013e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80013ec:	9105      	str	r1, [sp, #20]
 80013ee:	6800      	ldr	r0, [r0, #0]
 80013f0:	a902      	add	r1, sp, #8
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	f000 f868 	bl	80014c8 <_svfiprintf_r>
 80013f8:	2200      	movs	r2, #0
 80013fa:	9b02      	ldr	r3, [sp, #8]
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	b01c      	add	sp, #112	; 0x70
 8001400:	f85d eb04 	ldr.w	lr, [sp], #4
 8001404:	b003      	add	sp, #12
 8001406:	4770      	bx	lr
 8001408:	2000000c 	.word	0x2000000c
 800140c:	ffff0208 	.word	0xffff0208

08001410 <__ssputs_r>:
 8001410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001414:	688e      	ldr	r6, [r1, #8]
 8001416:	4682      	mov	sl, r0
 8001418:	429e      	cmp	r6, r3
 800141a:	460c      	mov	r4, r1
 800141c:	4690      	mov	r8, r2
 800141e:	461f      	mov	r7, r3
 8001420:	d838      	bhi.n	8001494 <__ssputs_r+0x84>
 8001422:	898a      	ldrh	r2, [r1, #12]
 8001424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001428:	d032      	beq.n	8001490 <__ssputs_r+0x80>
 800142a:	6825      	ldr	r5, [r4, #0]
 800142c:	6909      	ldr	r1, [r1, #16]
 800142e:	3301      	adds	r3, #1
 8001430:	eba5 0901 	sub.w	r9, r5, r1
 8001434:	6965      	ldr	r5, [r4, #20]
 8001436:	444b      	add	r3, r9
 8001438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800143c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001440:	106d      	asrs	r5, r5, #1
 8001442:	429d      	cmp	r5, r3
 8001444:	bf38      	it	cc
 8001446:	461d      	movcc	r5, r3
 8001448:	0553      	lsls	r3, r2, #21
 800144a:	d531      	bpl.n	80014b0 <__ssputs_r+0xa0>
 800144c:	4629      	mov	r1, r5
 800144e:	f000 fb61 	bl	8001b14 <_malloc_r>
 8001452:	4606      	mov	r6, r0
 8001454:	b950      	cbnz	r0, 800146c <__ssputs_r+0x5c>
 8001456:	230c      	movs	r3, #12
 8001458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800145c:	f8ca 3000 	str.w	r3, [sl]
 8001460:	89a3      	ldrh	r3, [r4, #12]
 8001462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001466:	81a3      	strh	r3, [r4, #12]
 8001468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800146c:	464a      	mov	r2, r9
 800146e:	6921      	ldr	r1, [r4, #16]
 8001470:	f7ff ff98 	bl	80013a4 <memcpy>
 8001474:	89a3      	ldrh	r3, [r4, #12]
 8001476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800147a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800147e:	81a3      	strh	r3, [r4, #12]
 8001480:	6126      	str	r6, [r4, #16]
 8001482:	444e      	add	r6, r9
 8001484:	6026      	str	r6, [r4, #0]
 8001486:	463e      	mov	r6, r7
 8001488:	6165      	str	r5, [r4, #20]
 800148a:	eba5 0509 	sub.w	r5, r5, r9
 800148e:	60a5      	str	r5, [r4, #8]
 8001490:	42be      	cmp	r6, r7
 8001492:	d900      	bls.n	8001496 <__ssputs_r+0x86>
 8001494:	463e      	mov	r6, r7
 8001496:	4632      	mov	r2, r6
 8001498:	4641      	mov	r1, r8
 800149a:	6820      	ldr	r0, [r4, #0]
 800149c:	f000 fab8 	bl	8001a10 <memmove>
 80014a0:	68a3      	ldr	r3, [r4, #8]
 80014a2:	2000      	movs	r0, #0
 80014a4:	1b9b      	subs	r3, r3, r6
 80014a6:	60a3      	str	r3, [r4, #8]
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	4433      	add	r3, r6
 80014ac:	6023      	str	r3, [r4, #0]
 80014ae:	e7db      	b.n	8001468 <__ssputs_r+0x58>
 80014b0:	462a      	mov	r2, r5
 80014b2:	f000 fba3 	bl	8001bfc <_realloc_r>
 80014b6:	4606      	mov	r6, r0
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d1e1      	bne.n	8001480 <__ssputs_r+0x70>
 80014bc:	4650      	mov	r0, sl
 80014be:	6921      	ldr	r1, [r4, #16]
 80014c0:	f000 fac0 	bl	8001a44 <_free_r>
 80014c4:	e7c7      	b.n	8001456 <__ssputs_r+0x46>
	...

080014c8 <_svfiprintf_r>:
 80014c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014cc:	4698      	mov	r8, r3
 80014ce:	898b      	ldrh	r3, [r1, #12]
 80014d0:	4607      	mov	r7, r0
 80014d2:	061b      	lsls	r3, r3, #24
 80014d4:	460d      	mov	r5, r1
 80014d6:	4614      	mov	r4, r2
 80014d8:	b09d      	sub	sp, #116	; 0x74
 80014da:	d50e      	bpl.n	80014fa <_svfiprintf_r+0x32>
 80014dc:	690b      	ldr	r3, [r1, #16]
 80014de:	b963      	cbnz	r3, 80014fa <_svfiprintf_r+0x32>
 80014e0:	2140      	movs	r1, #64	; 0x40
 80014e2:	f000 fb17 	bl	8001b14 <_malloc_r>
 80014e6:	6028      	str	r0, [r5, #0]
 80014e8:	6128      	str	r0, [r5, #16]
 80014ea:	b920      	cbnz	r0, 80014f6 <_svfiprintf_r+0x2e>
 80014ec:	230c      	movs	r3, #12
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f4:	e0d1      	b.n	800169a <_svfiprintf_r+0x1d2>
 80014f6:	2340      	movs	r3, #64	; 0x40
 80014f8:	616b      	str	r3, [r5, #20]
 80014fa:	2300      	movs	r3, #0
 80014fc:	9309      	str	r3, [sp, #36]	; 0x24
 80014fe:	2320      	movs	r3, #32
 8001500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001504:	2330      	movs	r3, #48	; 0x30
 8001506:	f04f 0901 	mov.w	r9, #1
 800150a:	f8cd 800c 	str.w	r8, [sp, #12]
 800150e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80016b4 <_svfiprintf_r+0x1ec>
 8001512:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001516:	4623      	mov	r3, r4
 8001518:	469a      	mov	sl, r3
 800151a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800151e:	b10a      	cbz	r2, 8001524 <_svfiprintf_r+0x5c>
 8001520:	2a25      	cmp	r2, #37	; 0x25
 8001522:	d1f9      	bne.n	8001518 <_svfiprintf_r+0x50>
 8001524:	ebba 0b04 	subs.w	fp, sl, r4
 8001528:	d00b      	beq.n	8001542 <_svfiprintf_r+0x7a>
 800152a:	465b      	mov	r3, fp
 800152c:	4622      	mov	r2, r4
 800152e:	4629      	mov	r1, r5
 8001530:	4638      	mov	r0, r7
 8001532:	f7ff ff6d 	bl	8001410 <__ssputs_r>
 8001536:	3001      	adds	r0, #1
 8001538:	f000 80aa 	beq.w	8001690 <_svfiprintf_r+0x1c8>
 800153c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800153e:	445a      	add	r2, fp
 8001540:	9209      	str	r2, [sp, #36]	; 0x24
 8001542:	f89a 3000 	ldrb.w	r3, [sl]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80a2 	beq.w	8001690 <_svfiprintf_r+0x1c8>
 800154c:	2300      	movs	r3, #0
 800154e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001556:	f10a 0a01 	add.w	sl, sl, #1
 800155a:	9304      	str	r3, [sp, #16]
 800155c:	9307      	str	r3, [sp, #28]
 800155e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001562:	931a      	str	r3, [sp, #104]	; 0x68
 8001564:	4654      	mov	r4, sl
 8001566:	2205      	movs	r2, #5
 8001568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800156c:	4851      	ldr	r0, [pc, #324]	; (80016b4 <_svfiprintf_r+0x1ec>)
 800156e:	f000 fa41 	bl	80019f4 <memchr>
 8001572:	9a04      	ldr	r2, [sp, #16]
 8001574:	b9d8      	cbnz	r0, 80015ae <_svfiprintf_r+0xe6>
 8001576:	06d0      	lsls	r0, r2, #27
 8001578:	bf44      	itt	mi
 800157a:	2320      	movmi	r3, #32
 800157c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001580:	0711      	lsls	r1, r2, #28
 8001582:	bf44      	itt	mi
 8001584:	232b      	movmi	r3, #43	; 0x2b
 8001586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800158a:	f89a 3000 	ldrb.w	r3, [sl]
 800158e:	2b2a      	cmp	r3, #42	; 0x2a
 8001590:	d015      	beq.n	80015be <_svfiprintf_r+0xf6>
 8001592:	4654      	mov	r4, sl
 8001594:	2000      	movs	r0, #0
 8001596:	f04f 0c0a 	mov.w	ip, #10
 800159a:	9a07      	ldr	r2, [sp, #28]
 800159c:	4621      	mov	r1, r4
 800159e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015a2:	3b30      	subs	r3, #48	; 0x30
 80015a4:	2b09      	cmp	r3, #9
 80015a6:	d94e      	bls.n	8001646 <_svfiprintf_r+0x17e>
 80015a8:	b1b0      	cbz	r0, 80015d8 <_svfiprintf_r+0x110>
 80015aa:	9207      	str	r2, [sp, #28]
 80015ac:	e014      	b.n	80015d8 <_svfiprintf_r+0x110>
 80015ae:	eba0 0308 	sub.w	r3, r0, r8
 80015b2:	fa09 f303 	lsl.w	r3, r9, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	46a2      	mov	sl, r4
 80015ba:	9304      	str	r3, [sp, #16]
 80015bc:	e7d2      	b.n	8001564 <_svfiprintf_r+0x9c>
 80015be:	9b03      	ldr	r3, [sp, #12]
 80015c0:	1d19      	adds	r1, r3, #4
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	9103      	str	r1, [sp, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bfbb      	ittet	lt
 80015ca:	425b      	neglt	r3, r3
 80015cc:	f042 0202 	orrlt.w	r2, r2, #2
 80015d0:	9307      	strge	r3, [sp, #28]
 80015d2:	9307      	strlt	r3, [sp, #28]
 80015d4:	bfb8      	it	lt
 80015d6:	9204      	strlt	r2, [sp, #16]
 80015d8:	7823      	ldrb	r3, [r4, #0]
 80015da:	2b2e      	cmp	r3, #46	; 0x2e
 80015dc:	d10c      	bne.n	80015f8 <_svfiprintf_r+0x130>
 80015de:	7863      	ldrb	r3, [r4, #1]
 80015e0:	2b2a      	cmp	r3, #42	; 0x2a
 80015e2:	d135      	bne.n	8001650 <_svfiprintf_r+0x188>
 80015e4:	9b03      	ldr	r3, [sp, #12]
 80015e6:	3402      	adds	r4, #2
 80015e8:	1d1a      	adds	r2, r3, #4
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	9203      	str	r2, [sp, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bfb8      	it	lt
 80015f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80015f6:	9305      	str	r3, [sp, #20]
 80015f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80016b8 <_svfiprintf_r+0x1f0>
 80015fc:	2203      	movs	r2, #3
 80015fe:	4650      	mov	r0, sl
 8001600:	7821      	ldrb	r1, [r4, #0]
 8001602:	f000 f9f7 	bl	80019f4 <memchr>
 8001606:	b140      	cbz	r0, 800161a <_svfiprintf_r+0x152>
 8001608:	2340      	movs	r3, #64	; 0x40
 800160a:	eba0 000a 	sub.w	r0, r0, sl
 800160e:	fa03 f000 	lsl.w	r0, r3, r0
 8001612:	9b04      	ldr	r3, [sp, #16]
 8001614:	3401      	adds	r4, #1
 8001616:	4303      	orrs	r3, r0
 8001618:	9304      	str	r3, [sp, #16]
 800161a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800161e:	2206      	movs	r2, #6
 8001620:	4826      	ldr	r0, [pc, #152]	; (80016bc <_svfiprintf_r+0x1f4>)
 8001622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001626:	f000 f9e5 	bl	80019f4 <memchr>
 800162a:	2800      	cmp	r0, #0
 800162c:	d038      	beq.n	80016a0 <_svfiprintf_r+0x1d8>
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <_svfiprintf_r+0x1f8>)
 8001630:	bb1b      	cbnz	r3, 800167a <_svfiprintf_r+0x1b2>
 8001632:	9b03      	ldr	r3, [sp, #12]
 8001634:	3307      	adds	r3, #7
 8001636:	f023 0307 	bic.w	r3, r3, #7
 800163a:	3308      	adds	r3, #8
 800163c:	9303      	str	r3, [sp, #12]
 800163e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001640:	4433      	add	r3, r6
 8001642:	9309      	str	r3, [sp, #36]	; 0x24
 8001644:	e767      	b.n	8001516 <_svfiprintf_r+0x4e>
 8001646:	460c      	mov	r4, r1
 8001648:	2001      	movs	r0, #1
 800164a:	fb0c 3202 	mla	r2, ip, r2, r3
 800164e:	e7a5      	b.n	800159c <_svfiprintf_r+0xd4>
 8001650:	2300      	movs	r3, #0
 8001652:	f04f 0c0a 	mov.w	ip, #10
 8001656:	4619      	mov	r1, r3
 8001658:	3401      	adds	r4, #1
 800165a:	9305      	str	r3, [sp, #20]
 800165c:	4620      	mov	r0, r4
 800165e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001662:	3a30      	subs	r2, #48	; 0x30
 8001664:	2a09      	cmp	r2, #9
 8001666:	d903      	bls.n	8001670 <_svfiprintf_r+0x1a8>
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0c5      	beq.n	80015f8 <_svfiprintf_r+0x130>
 800166c:	9105      	str	r1, [sp, #20]
 800166e:	e7c3      	b.n	80015f8 <_svfiprintf_r+0x130>
 8001670:	4604      	mov	r4, r0
 8001672:	2301      	movs	r3, #1
 8001674:	fb0c 2101 	mla	r1, ip, r1, r2
 8001678:	e7f0      	b.n	800165c <_svfiprintf_r+0x194>
 800167a:	ab03      	add	r3, sp, #12
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	462a      	mov	r2, r5
 8001680:	4638      	mov	r0, r7
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <_svfiprintf_r+0x1fc>)
 8001684:	a904      	add	r1, sp, #16
 8001686:	f3af 8000 	nop.w
 800168a:	1c42      	adds	r2, r0, #1
 800168c:	4606      	mov	r6, r0
 800168e:	d1d6      	bne.n	800163e <_svfiprintf_r+0x176>
 8001690:	89ab      	ldrh	r3, [r5, #12]
 8001692:	065b      	lsls	r3, r3, #25
 8001694:	f53f af2c 	bmi.w	80014f0 <_svfiprintf_r+0x28>
 8001698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800169a:	b01d      	add	sp, #116	; 0x74
 800169c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016a0:	ab03      	add	r3, sp, #12
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	462a      	mov	r2, r5
 80016a6:	4638      	mov	r0, r7
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <_svfiprintf_r+0x1fc>)
 80016aa:	a904      	add	r1, sp, #16
 80016ac:	f000 f87c 	bl	80017a8 <_printf_i>
 80016b0:	e7eb      	b.n	800168a <_svfiprintf_r+0x1c2>
 80016b2:	bf00      	nop
 80016b4:	08001d36 	.word	0x08001d36
 80016b8:	08001d3c 	.word	0x08001d3c
 80016bc:	08001d40 	.word	0x08001d40
 80016c0:	00000000 	.word	0x00000000
 80016c4:	08001411 	.word	0x08001411

080016c8 <_printf_common>:
 80016c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016cc:	4616      	mov	r6, r2
 80016ce:	4699      	mov	r9, r3
 80016d0:	688a      	ldr	r2, [r1, #8]
 80016d2:	690b      	ldr	r3, [r1, #16]
 80016d4:	4607      	mov	r7, r0
 80016d6:	4293      	cmp	r3, r2
 80016d8:	bfb8      	it	lt
 80016da:	4613      	movlt	r3, r2
 80016dc:	6033      	str	r3, [r6, #0]
 80016de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80016e2:	460c      	mov	r4, r1
 80016e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80016e8:	b10a      	cbz	r2, 80016ee <_printf_common+0x26>
 80016ea:	3301      	adds	r3, #1
 80016ec:	6033      	str	r3, [r6, #0]
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	0699      	lsls	r1, r3, #26
 80016f2:	bf42      	ittt	mi
 80016f4:	6833      	ldrmi	r3, [r6, #0]
 80016f6:	3302      	addmi	r3, #2
 80016f8:	6033      	strmi	r3, [r6, #0]
 80016fa:	6825      	ldr	r5, [r4, #0]
 80016fc:	f015 0506 	ands.w	r5, r5, #6
 8001700:	d106      	bne.n	8001710 <_printf_common+0x48>
 8001702:	f104 0a19 	add.w	sl, r4, #25
 8001706:	68e3      	ldr	r3, [r4, #12]
 8001708:	6832      	ldr	r2, [r6, #0]
 800170a:	1a9b      	subs	r3, r3, r2
 800170c:	42ab      	cmp	r3, r5
 800170e:	dc28      	bgt.n	8001762 <_printf_common+0x9a>
 8001710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001714:	1e13      	subs	r3, r2, #0
 8001716:	6822      	ldr	r2, [r4, #0]
 8001718:	bf18      	it	ne
 800171a:	2301      	movne	r3, #1
 800171c:	0692      	lsls	r2, r2, #26
 800171e:	d42d      	bmi.n	800177c <_printf_common+0xb4>
 8001720:	4649      	mov	r1, r9
 8001722:	4638      	mov	r0, r7
 8001724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001728:	47c0      	blx	r8
 800172a:	3001      	adds	r0, #1
 800172c:	d020      	beq.n	8001770 <_printf_common+0xa8>
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	68e5      	ldr	r5, [r4, #12]
 8001732:	f003 0306 	and.w	r3, r3, #6
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf18      	it	ne
 800173a:	2500      	movne	r5, #0
 800173c:	6832      	ldr	r2, [r6, #0]
 800173e:	f04f 0600 	mov.w	r6, #0
 8001742:	68a3      	ldr	r3, [r4, #8]
 8001744:	bf08      	it	eq
 8001746:	1aad      	subeq	r5, r5, r2
 8001748:	6922      	ldr	r2, [r4, #16]
 800174a:	bf08      	it	eq
 800174c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001750:	4293      	cmp	r3, r2
 8001752:	bfc4      	itt	gt
 8001754:	1a9b      	subgt	r3, r3, r2
 8001756:	18ed      	addgt	r5, r5, r3
 8001758:	341a      	adds	r4, #26
 800175a:	42b5      	cmp	r5, r6
 800175c:	d11a      	bne.n	8001794 <_printf_common+0xcc>
 800175e:	2000      	movs	r0, #0
 8001760:	e008      	b.n	8001774 <_printf_common+0xac>
 8001762:	2301      	movs	r3, #1
 8001764:	4652      	mov	r2, sl
 8001766:	4649      	mov	r1, r9
 8001768:	4638      	mov	r0, r7
 800176a:	47c0      	blx	r8
 800176c:	3001      	adds	r0, #1
 800176e:	d103      	bne.n	8001778 <_printf_common+0xb0>
 8001770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001778:	3501      	adds	r5, #1
 800177a:	e7c4      	b.n	8001706 <_printf_common+0x3e>
 800177c:	2030      	movs	r0, #48	; 0x30
 800177e:	18e1      	adds	r1, r4, r3
 8001780:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800178a:	4422      	add	r2, r4
 800178c:	3302      	adds	r3, #2
 800178e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001792:	e7c5      	b.n	8001720 <_printf_common+0x58>
 8001794:	2301      	movs	r3, #1
 8001796:	4622      	mov	r2, r4
 8001798:	4649      	mov	r1, r9
 800179a:	4638      	mov	r0, r7
 800179c:	47c0      	blx	r8
 800179e:	3001      	adds	r0, #1
 80017a0:	d0e6      	beq.n	8001770 <_printf_common+0xa8>
 80017a2:	3601      	adds	r6, #1
 80017a4:	e7d9      	b.n	800175a <_printf_common+0x92>
	...

080017a8 <_printf_i>:
 80017a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80017ac:	7e0f      	ldrb	r7, [r1, #24]
 80017ae:	4691      	mov	r9, r2
 80017b0:	2f78      	cmp	r7, #120	; 0x78
 80017b2:	4680      	mov	r8, r0
 80017b4:	460c      	mov	r4, r1
 80017b6:	469a      	mov	sl, r3
 80017b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80017ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80017be:	d807      	bhi.n	80017d0 <_printf_i+0x28>
 80017c0:	2f62      	cmp	r7, #98	; 0x62
 80017c2:	d80a      	bhi.n	80017da <_printf_i+0x32>
 80017c4:	2f00      	cmp	r7, #0
 80017c6:	f000 80d9 	beq.w	800197c <_printf_i+0x1d4>
 80017ca:	2f58      	cmp	r7, #88	; 0x58
 80017cc:	f000 80a4 	beq.w	8001918 <_printf_i+0x170>
 80017d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80017d8:	e03a      	b.n	8001850 <_printf_i+0xa8>
 80017da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80017de:	2b15      	cmp	r3, #21
 80017e0:	d8f6      	bhi.n	80017d0 <_printf_i+0x28>
 80017e2:	a101      	add	r1, pc, #4	; (adr r1, 80017e8 <_printf_i+0x40>)
 80017e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80017e8:	08001841 	.word	0x08001841
 80017ec:	08001855 	.word	0x08001855
 80017f0:	080017d1 	.word	0x080017d1
 80017f4:	080017d1 	.word	0x080017d1
 80017f8:	080017d1 	.word	0x080017d1
 80017fc:	080017d1 	.word	0x080017d1
 8001800:	08001855 	.word	0x08001855
 8001804:	080017d1 	.word	0x080017d1
 8001808:	080017d1 	.word	0x080017d1
 800180c:	080017d1 	.word	0x080017d1
 8001810:	080017d1 	.word	0x080017d1
 8001814:	08001963 	.word	0x08001963
 8001818:	08001885 	.word	0x08001885
 800181c:	08001945 	.word	0x08001945
 8001820:	080017d1 	.word	0x080017d1
 8001824:	080017d1 	.word	0x080017d1
 8001828:	08001985 	.word	0x08001985
 800182c:	080017d1 	.word	0x080017d1
 8001830:	08001885 	.word	0x08001885
 8001834:	080017d1 	.word	0x080017d1
 8001838:	080017d1 	.word	0x080017d1
 800183c:	0800194d 	.word	0x0800194d
 8001840:	682b      	ldr	r3, [r5, #0]
 8001842:	1d1a      	adds	r2, r3, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	602a      	str	r2, [r5, #0]
 8001848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800184c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001850:	2301      	movs	r3, #1
 8001852:	e0a4      	b.n	800199e <_printf_i+0x1f6>
 8001854:	6820      	ldr	r0, [r4, #0]
 8001856:	6829      	ldr	r1, [r5, #0]
 8001858:	0606      	lsls	r6, r0, #24
 800185a:	f101 0304 	add.w	r3, r1, #4
 800185e:	d50a      	bpl.n	8001876 <_printf_i+0xce>
 8001860:	680e      	ldr	r6, [r1, #0]
 8001862:	602b      	str	r3, [r5, #0]
 8001864:	2e00      	cmp	r6, #0
 8001866:	da03      	bge.n	8001870 <_printf_i+0xc8>
 8001868:	232d      	movs	r3, #45	; 0x2d
 800186a:	4276      	negs	r6, r6
 800186c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001870:	230a      	movs	r3, #10
 8001872:	485e      	ldr	r0, [pc, #376]	; (80019ec <_printf_i+0x244>)
 8001874:	e019      	b.n	80018aa <_printf_i+0x102>
 8001876:	680e      	ldr	r6, [r1, #0]
 8001878:	f010 0f40 	tst.w	r0, #64	; 0x40
 800187c:	602b      	str	r3, [r5, #0]
 800187e:	bf18      	it	ne
 8001880:	b236      	sxthne	r6, r6
 8001882:	e7ef      	b.n	8001864 <_printf_i+0xbc>
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	6820      	ldr	r0, [r4, #0]
 8001888:	1d19      	adds	r1, r3, #4
 800188a:	6029      	str	r1, [r5, #0]
 800188c:	0601      	lsls	r1, r0, #24
 800188e:	d501      	bpl.n	8001894 <_printf_i+0xec>
 8001890:	681e      	ldr	r6, [r3, #0]
 8001892:	e002      	b.n	800189a <_printf_i+0xf2>
 8001894:	0646      	lsls	r6, r0, #25
 8001896:	d5fb      	bpl.n	8001890 <_printf_i+0xe8>
 8001898:	881e      	ldrh	r6, [r3, #0]
 800189a:	2f6f      	cmp	r7, #111	; 0x6f
 800189c:	bf0c      	ite	eq
 800189e:	2308      	moveq	r3, #8
 80018a0:	230a      	movne	r3, #10
 80018a2:	4852      	ldr	r0, [pc, #328]	; (80019ec <_printf_i+0x244>)
 80018a4:	2100      	movs	r1, #0
 80018a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80018aa:	6865      	ldr	r5, [r4, #4]
 80018ac:	2d00      	cmp	r5, #0
 80018ae:	bfa8      	it	ge
 80018b0:	6821      	ldrge	r1, [r4, #0]
 80018b2:	60a5      	str	r5, [r4, #8]
 80018b4:	bfa4      	itt	ge
 80018b6:	f021 0104 	bicge.w	r1, r1, #4
 80018ba:	6021      	strge	r1, [r4, #0]
 80018bc:	b90e      	cbnz	r6, 80018c2 <_printf_i+0x11a>
 80018be:	2d00      	cmp	r5, #0
 80018c0:	d04d      	beq.n	800195e <_printf_i+0x1b6>
 80018c2:	4615      	mov	r5, r2
 80018c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80018c8:	fb03 6711 	mls	r7, r3, r1, r6
 80018cc:	5dc7      	ldrb	r7, [r0, r7]
 80018ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80018d2:	4637      	mov	r7, r6
 80018d4:	42bb      	cmp	r3, r7
 80018d6:	460e      	mov	r6, r1
 80018d8:	d9f4      	bls.n	80018c4 <_printf_i+0x11c>
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d10b      	bne.n	80018f6 <_printf_i+0x14e>
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	07de      	lsls	r6, r3, #31
 80018e2:	d508      	bpl.n	80018f6 <_printf_i+0x14e>
 80018e4:	6923      	ldr	r3, [r4, #16]
 80018e6:	6861      	ldr	r1, [r4, #4]
 80018e8:	4299      	cmp	r1, r3
 80018ea:	bfde      	ittt	le
 80018ec:	2330      	movle	r3, #48	; 0x30
 80018ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80018f2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80018f6:	1b52      	subs	r2, r2, r5
 80018f8:	6122      	str	r2, [r4, #16]
 80018fa:	464b      	mov	r3, r9
 80018fc:	4621      	mov	r1, r4
 80018fe:	4640      	mov	r0, r8
 8001900:	f8cd a000 	str.w	sl, [sp]
 8001904:	aa03      	add	r2, sp, #12
 8001906:	f7ff fedf 	bl	80016c8 <_printf_common>
 800190a:	3001      	adds	r0, #1
 800190c:	d14c      	bne.n	80019a8 <_printf_i+0x200>
 800190e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001912:	b004      	add	sp, #16
 8001914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001918:	4834      	ldr	r0, [pc, #208]	; (80019ec <_printf_i+0x244>)
 800191a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800191e:	6829      	ldr	r1, [r5, #0]
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	f851 6b04 	ldr.w	r6, [r1], #4
 8001926:	6029      	str	r1, [r5, #0]
 8001928:	061d      	lsls	r5, r3, #24
 800192a:	d514      	bpl.n	8001956 <_printf_i+0x1ae>
 800192c:	07df      	lsls	r7, r3, #31
 800192e:	bf44      	itt	mi
 8001930:	f043 0320 	orrmi.w	r3, r3, #32
 8001934:	6023      	strmi	r3, [r4, #0]
 8001936:	b91e      	cbnz	r6, 8001940 <_printf_i+0x198>
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	f023 0320 	bic.w	r3, r3, #32
 800193e:	6023      	str	r3, [r4, #0]
 8001940:	2310      	movs	r3, #16
 8001942:	e7af      	b.n	80018a4 <_printf_i+0xfc>
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	f043 0320 	orr.w	r3, r3, #32
 800194a:	6023      	str	r3, [r4, #0]
 800194c:	2378      	movs	r3, #120	; 0x78
 800194e:	4828      	ldr	r0, [pc, #160]	; (80019f0 <_printf_i+0x248>)
 8001950:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001954:	e7e3      	b.n	800191e <_printf_i+0x176>
 8001956:	0659      	lsls	r1, r3, #25
 8001958:	bf48      	it	mi
 800195a:	b2b6      	uxthmi	r6, r6
 800195c:	e7e6      	b.n	800192c <_printf_i+0x184>
 800195e:	4615      	mov	r5, r2
 8001960:	e7bb      	b.n	80018da <_printf_i+0x132>
 8001962:	682b      	ldr	r3, [r5, #0]
 8001964:	6826      	ldr	r6, [r4, #0]
 8001966:	1d18      	adds	r0, r3, #4
 8001968:	6961      	ldr	r1, [r4, #20]
 800196a:	6028      	str	r0, [r5, #0]
 800196c:	0635      	lsls	r5, r6, #24
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	d501      	bpl.n	8001976 <_printf_i+0x1ce>
 8001972:	6019      	str	r1, [r3, #0]
 8001974:	e002      	b.n	800197c <_printf_i+0x1d4>
 8001976:	0670      	lsls	r0, r6, #25
 8001978:	d5fb      	bpl.n	8001972 <_printf_i+0x1ca>
 800197a:	8019      	strh	r1, [r3, #0]
 800197c:	2300      	movs	r3, #0
 800197e:	4615      	mov	r5, r2
 8001980:	6123      	str	r3, [r4, #16]
 8001982:	e7ba      	b.n	80018fa <_printf_i+0x152>
 8001984:	682b      	ldr	r3, [r5, #0]
 8001986:	2100      	movs	r1, #0
 8001988:	1d1a      	adds	r2, r3, #4
 800198a:	602a      	str	r2, [r5, #0]
 800198c:	681d      	ldr	r5, [r3, #0]
 800198e:	6862      	ldr	r2, [r4, #4]
 8001990:	4628      	mov	r0, r5
 8001992:	f000 f82f 	bl	80019f4 <memchr>
 8001996:	b108      	cbz	r0, 800199c <_printf_i+0x1f4>
 8001998:	1b40      	subs	r0, r0, r5
 800199a:	6060      	str	r0, [r4, #4]
 800199c:	6863      	ldr	r3, [r4, #4]
 800199e:	6123      	str	r3, [r4, #16]
 80019a0:	2300      	movs	r3, #0
 80019a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019a6:	e7a8      	b.n	80018fa <_printf_i+0x152>
 80019a8:	462a      	mov	r2, r5
 80019aa:	4649      	mov	r1, r9
 80019ac:	4640      	mov	r0, r8
 80019ae:	6923      	ldr	r3, [r4, #16]
 80019b0:	47d0      	blx	sl
 80019b2:	3001      	adds	r0, #1
 80019b4:	d0ab      	beq.n	800190e <_printf_i+0x166>
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	079b      	lsls	r3, r3, #30
 80019ba:	d413      	bmi.n	80019e4 <_printf_i+0x23c>
 80019bc:	68e0      	ldr	r0, [r4, #12]
 80019be:	9b03      	ldr	r3, [sp, #12]
 80019c0:	4298      	cmp	r0, r3
 80019c2:	bfb8      	it	lt
 80019c4:	4618      	movlt	r0, r3
 80019c6:	e7a4      	b.n	8001912 <_printf_i+0x16a>
 80019c8:	2301      	movs	r3, #1
 80019ca:	4632      	mov	r2, r6
 80019cc:	4649      	mov	r1, r9
 80019ce:	4640      	mov	r0, r8
 80019d0:	47d0      	blx	sl
 80019d2:	3001      	adds	r0, #1
 80019d4:	d09b      	beq.n	800190e <_printf_i+0x166>
 80019d6:	3501      	adds	r5, #1
 80019d8:	68e3      	ldr	r3, [r4, #12]
 80019da:	9903      	ldr	r1, [sp, #12]
 80019dc:	1a5b      	subs	r3, r3, r1
 80019de:	42ab      	cmp	r3, r5
 80019e0:	dcf2      	bgt.n	80019c8 <_printf_i+0x220>
 80019e2:	e7eb      	b.n	80019bc <_printf_i+0x214>
 80019e4:	2500      	movs	r5, #0
 80019e6:	f104 0619 	add.w	r6, r4, #25
 80019ea:	e7f5      	b.n	80019d8 <_printf_i+0x230>
 80019ec:	08001d47 	.word	0x08001d47
 80019f0:	08001d58 	.word	0x08001d58

080019f4 <memchr>:
 80019f4:	4603      	mov	r3, r0
 80019f6:	b510      	push	{r4, lr}
 80019f8:	b2c9      	uxtb	r1, r1
 80019fa:	4402      	add	r2, r0
 80019fc:	4293      	cmp	r3, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	d101      	bne.n	8001a06 <memchr+0x12>
 8001a02:	2000      	movs	r0, #0
 8001a04:	e003      	b.n	8001a0e <memchr+0x1a>
 8001a06:	7804      	ldrb	r4, [r0, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	428c      	cmp	r4, r1
 8001a0c:	d1f6      	bne.n	80019fc <memchr+0x8>
 8001a0e:	bd10      	pop	{r4, pc}

08001a10 <memmove>:
 8001a10:	4288      	cmp	r0, r1
 8001a12:	b510      	push	{r4, lr}
 8001a14:	eb01 0402 	add.w	r4, r1, r2
 8001a18:	d902      	bls.n	8001a20 <memmove+0x10>
 8001a1a:	4284      	cmp	r4, r0
 8001a1c:	4623      	mov	r3, r4
 8001a1e:	d807      	bhi.n	8001a30 <memmove+0x20>
 8001a20:	1e43      	subs	r3, r0, #1
 8001a22:	42a1      	cmp	r1, r4
 8001a24:	d008      	beq.n	8001a38 <memmove+0x28>
 8001a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a2e:	e7f8      	b.n	8001a22 <memmove+0x12>
 8001a30:	4601      	mov	r1, r0
 8001a32:	4402      	add	r2, r0
 8001a34:	428a      	cmp	r2, r1
 8001a36:	d100      	bne.n	8001a3a <memmove+0x2a>
 8001a38:	bd10      	pop	{r4, pc}
 8001a3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001a3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001a42:	e7f7      	b.n	8001a34 <memmove+0x24>

08001a44 <_free_r>:
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	4605      	mov	r5, r0
 8001a48:	2900      	cmp	r1, #0
 8001a4a:	d040      	beq.n	8001ace <_free_r+0x8a>
 8001a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a50:	1f0c      	subs	r4, r1, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bfb8      	it	lt
 8001a56:	18e4      	addlt	r4, r4, r3
 8001a58:	f000 f910 	bl	8001c7c <__malloc_lock>
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <_free_r+0x8c>)
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	b933      	cbnz	r3, 8001a70 <_free_r+0x2c>
 8001a62:	6063      	str	r3, [r4, #4]
 8001a64:	6014      	str	r4, [r2, #0]
 8001a66:	4628      	mov	r0, r5
 8001a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a6c:	f000 b90c 	b.w	8001c88 <__malloc_unlock>
 8001a70:	42a3      	cmp	r3, r4
 8001a72:	d908      	bls.n	8001a86 <_free_r+0x42>
 8001a74:	6820      	ldr	r0, [r4, #0]
 8001a76:	1821      	adds	r1, r4, r0
 8001a78:	428b      	cmp	r3, r1
 8001a7a:	bf01      	itttt	eq
 8001a7c:	6819      	ldreq	r1, [r3, #0]
 8001a7e:	685b      	ldreq	r3, [r3, #4]
 8001a80:	1809      	addeq	r1, r1, r0
 8001a82:	6021      	streq	r1, [r4, #0]
 8001a84:	e7ed      	b.n	8001a62 <_free_r+0x1e>
 8001a86:	461a      	mov	r2, r3
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	b10b      	cbz	r3, 8001a90 <_free_r+0x4c>
 8001a8c:	42a3      	cmp	r3, r4
 8001a8e:	d9fa      	bls.n	8001a86 <_free_r+0x42>
 8001a90:	6811      	ldr	r1, [r2, #0]
 8001a92:	1850      	adds	r0, r2, r1
 8001a94:	42a0      	cmp	r0, r4
 8001a96:	d10b      	bne.n	8001ab0 <_free_r+0x6c>
 8001a98:	6820      	ldr	r0, [r4, #0]
 8001a9a:	4401      	add	r1, r0
 8001a9c:	1850      	adds	r0, r2, r1
 8001a9e:	4283      	cmp	r3, r0
 8001aa0:	6011      	str	r1, [r2, #0]
 8001aa2:	d1e0      	bne.n	8001a66 <_free_r+0x22>
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4401      	add	r1, r0
 8001aaa:	6011      	str	r1, [r2, #0]
 8001aac:	6053      	str	r3, [r2, #4]
 8001aae:	e7da      	b.n	8001a66 <_free_r+0x22>
 8001ab0:	d902      	bls.n	8001ab8 <_free_r+0x74>
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	602b      	str	r3, [r5, #0]
 8001ab6:	e7d6      	b.n	8001a66 <_free_r+0x22>
 8001ab8:	6820      	ldr	r0, [r4, #0]
 8001aba:	1821      	adds	r1, r4, r0
 8001abc:	428b      	cmp	r3, r1
 8001abe:	bf01      	itttt	eq
 8001ac0:	6819      	ldreq	r1, [r3, #0]
 8001ac2:	685b      	ldreq	r3, [r3, #4]
 8001ac4:	1809      	addeq	r1, r1, r0
 8001ac6:	6021      	streq	r1, [r4, #0]
 8001ac8:	6063      	str	r3, [r4, #4]
 8001aca:	6054      	str	r4, [r2, #4]
 8001acc:	e7cb      	b.n	8001a66 <_free_r+0x22>
 8001ace:	bd38      	pop	{r3, r4, r5, pc}
 8001ad0:	200000a8 	.word	0x200000a8

08001ad4 <sbrk_aligned>:
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	4e0e      	ldr	r6, [pc, #56]	; (8001b10 <sbrk_aligned+0x3c>)
 8001ad8:	460c      	mov	r4, r1
 8001ada:	6831      	ldr	r1, [r6, #0]
 8001adc:	4605      	mov	r5, r0
 8001ade:	b911      	cbnz	r1, 8001ae6 <sbrk_aligned+0x12>
 8001ae0:	f000 f8bc 	bl	8001c5c <_sbrk_r>
 8001ae4:	6030      	str	r0, [r6, #0]
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f000 f8b7 	bl	8001c5c <_sbrk_r>
 8001aee:	1c43      	adds	r3, r0, #1
 8001af0:	d00a      	beq.n	8001b08 <sbrk_aligned+0x34>
 8001af2:	1cc4      	adds	r4, r0, #3
 8001af4:	f024 0403 	bic.w	r4, r4, #3
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d007      	beq.n	8001b0c <sbrk_aligned+0x38>
 8001afc:	1a21      	subs	r1, r4, r0
 8001afe:	4628      	mov	r0, r5
 8001b00:	f000 f8ac 	bl	8001c5c <_sbrk_r>
 8001b04:	3001      	adds	r0, #1
 8001b06:	d101      	bne.n	8001b0c <sbrk_aligned+0x38>
 8001b08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}
 8001b10:	200000ac 	.word	0x200000ac

08001b14 <_malloc_r>:
 8001b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b18:	1ccd      	adds	r5, r1, #3
 8001b1a:	f025 0503 	bic.w	r5, r5, #3
 8001b1e:	3508      	adds	r5, #8
 8001b20:	2d0c      	cmp	r5, #12
 8001b22:	bf38      	it	cc
 8001b24:	250c      	movcc	r5, #12
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	4607      	mov	r7, r0
 8001b2a:	db01      	blt.n	8001b30 <_malloc_r+0x1c>
 8001b2c:	42a9      	cmp	r1, r5
 8001b2e:	d905      	bls.n	8001b3c <_malloc_r+0x28>
 8001b30:	230c      	movs	r3, #12
 8001b32:	2600      	movs	r6, #0
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	4630      	mov	r0, r6
 8001b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b3c:	4e2e      	ldr	r6, [pc, #184]	; (8001bf8 <_malloc_r+0xe4>)
 8001b3e:	f000 f89d 	bl	8001c7c <__malloc_lock>
 8001b42:	6833      	ldr	r3, [r6, #0]
 8001b44:	461c      	mov	r4, r3
 8001b46:	bb34      	cbnz	r4, 8001b96 <_malloc_r+0x82>
 8001b48:	4629      	mov	r1, r5
 8001b4a:	4638      	mov	r0, r7
 8001b4c:	f7ff ffc2 	bl	8001ad4 <sbrk_aligned>
 8001b50:	1c43      	adds	r3, r0, #1
 8001b52:	4604      	mov	r4, r0
 8001b54:	d14d      	bne.n	8001bf2 <_malloc_r+0xde>
 8001b56:	6834      	ldr	r4, [r6, #0]
 8001b58:	4626      	mov	r6, r4
 8001b5a:	2e00      	cmp	r6, #0
 8001b5c:	d140      	bne.n	8001be0 <_malloc_r+0xcc>
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	4631      	mov	r1, r6
 8001b62:	4638      	mov	r0, r7
 8001b64:	eb04 0803 	add.w	r8, r4, r3
 8001b68:	f000 f878 	bl	8001c5c <_sbrk_r>
 8001b6c:	4580      	cmp	r8, r0
 8001b6e:	d13a      	bne.n	8001be6 <_malloc_r+0xd2>
 8001b70:	6821      	ldr	r1, [r4, #0]
 8001b72:	3503      	adds	r5, #3
 8001b74:	1a6d      	subs	r5, r5, r1
 8001b76:	f025 0503 	bic.w	r5, r5, #3
 8001b7a:	3508      	adds	r5, #8
 8001b7c:	2d0c      	cmp	r5, #12
 8001b7e:	bf38      	it	cc
 8001b80:	250c      	movcc	r5, #12
 8001b82:	4638      	mov	r0, r7
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7ff ffa5 	bl	8001ad4 <sbrk_aligned>
 8001b8a:	3001      	adds	r0, #1
 8001b8c:	d02b      	beq.n	8001be6 <_malloc_r+0xd2>
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	442b      	add	r3, r5
 8001b92:	6023      	str	r3, [r4, #0]
 8001b94:	e00e      	b.n	8001bb4 <_malloc_r+0xa0>
 8001b96:	6822      	ldr	r2, [r4, #0]
 8001b98:	1b52      	subs	r2, r2, r5
 8001b9a:	d41e      	bmi.n	8001bda <_malloc_r+0xc6>
 8001b9c:	2a0b      	cmp	r2, #11
 8001b9e:	d916      	bls.n	8001bce <_malloc_r+0xba>
 8001ba0:	1961      	adds	r1, r4, r5
 8001ba2:	42a3      	cmp	r3, r4
 8001ba4:	6025      	str	r5, [r4, #0]
 8001ba6:	bf18      	it	ne
 8001ba8:	6059      	strne	r1, [r3, #4]
 8001baa:	6863      	ldr	r3, [r4, #4]
 8001bac:	bf08      	it	eq
 8001bae:	6031      	streq	r1, [r6, #0]
 8001bb0:	5162      	str	r2, [r4, r5]
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	4638      	mov	r0, r7
 8001bb6:	f104 060b 	add.w	r6, r4, #11
 8001bba:	f000 f865 	bl	8001c88 <__malloc_unlock>
 8001bbe:	f026 0607 	bic.w	r6, r6, #7
 8001bc2:	1d23      	adds	r3, r4, #4
 8001bc4:	1af2      	subs	r2, r6, r3
 8001bc6:	d0b6      	beq.n	8001b36 <_malloc_r+0x22>
 8001bc8:	1b9b      	subs	r3, r3, r6
 8001bca:	50a3      	str	r3, [r4, r2]
 8001bcc:	e7b3      	b.n	8001b36 <_malloc_r+0x22>
 8001bce:	6862      	ldr	r2, [r4, #4]
 8001bd0:	42a3      	cmp	r3, r4
 8001bd2:	bf0c      	ite	eq
 8001bd4:	6032      	streq	r2, [r6, #0]
 8001bd6:	605a      	strne	r2, [r3, #4]
 8001bd8:	e7ec      	b.n	8001bb4 <_malloc_r+0xa0>
 8001bda:	4623      	mov	r3, r4
 8001bdc:	6864      	ldr	r4, [r4, #4]
 8001bde:	e7b2      	b.n	8001b46 <_malloc_r+0x32>
 8001be0:	4634      	mov	r4, r6
 8001be2:	6876      	ldr	r6, [r6, #4]
 8001be4:	e7b9      	b.n	8001b5a <_malloc_r+0x46>
 8001be6:	230c      	movs	r3, #12
 8001be8:	4638      	mov	r0, r7
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	f000 f84c 	bl	8001c88 <__malloc_unlock>
 8001bf0:	e7a1      	b.n	8001b36 <_malloc_r+0x22>
 8001bf2:	6025      	str	r5, [r4, #0]
 8001bf4:	e7de      	b.n	8001bb4 <_malloc_r+0xa0>
 8001bf6:	bf00      	nop
 8001bf8:	200000a8 	.word	0x200000a8

08001bfc <_realloc_r>:
 8001bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c00:	4680      	mov	r8, r0
 8001c02:	4614      	mov	r4, r2
 8001c04:	460e      	mov	r6, r1
 8001c06:	b921      	cbnz	r1, 8001c12 <_realloc_r+0x16>
 8001c08:	4611      	mov	r1, r2
 8001c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0e:	f7ff bf81 	b.w	8001b14 <_malloc_r>
 8001c12:	b92a      	cbnz	r2, 8001c20 <_realloc_r+0x24>
 8001c14:	f7ff ff16 	bl	8001a44 <_free_r>
 8001c18:	4625      	mov	r5, r4
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c20:	f000 f838 	bl	8001c94 <_malloc_usable_size_r>
 8001c24:	4284      	cmp	r4, r0
 8001c26:	4607      	mov	r7, r0
 8001c28:	d802      	bhi.n	8001c30 <_realloc_r+0x34>
 8001c2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001c2e:	d812      	bhi.n	8001c56 <_realloc_r+0x5a>
 8001c30:	4621      	mov	r1, r4
 8001c32:	4640      	mov	r0, r8
 8001c34:	f7ff ff6e 	bl	8001b14 <_malloc_r>
 8001c38:	4605      	mov	r5, r0
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	d0ed      	beq.n	8001c1a <_realloc_r+0x1e>
 8001c3e:	42bc      	cmp	r4, r7
 8001c40:	4622      	mov	r2, r4
 8001c42:	4631      	mov	r1, r6
 8001c44:	bf28      	it	cs
 8001c46:	463a      	movcs	r2, r7
 8001c48:	f7ff fbac 	bl	80013a4 <memcpy>
 8001c4c:	4631      	mov	r1, r6
 8001c4e:	4640      	mov	r0, r8
 8001c50:	f7ff fef8 	bl	8001a44 <_free_r>
 8001c54:	e7e1      	b.n	8001c1a <_realloc_r+0x1e>
 8001c56:	4635      	mov	r5, r6
 8001c58:	e7df      	b.n	8001c1a <_realloc_r+0x1e>
	...

08001c5c <_sbrk_r>:
 8001c5c:	b538      	push	{r3, r4, r5, lr}
 8001c5e:	2300      	movs	r3, #0
 8001c60:	4d05      	ldr	r5, [pc, #20]	; (8001c78 <_sbrk_r+0x1c>)
 8001c62:	4604      	mov	r4, r0
 8001c64:	4608      	mov	r0, r1
 8001c66:	602b      	str	r3, [r5, #0]
 8001c68:	f7fe fb26 	bl	80002b8 <_sbrk>
 8001c6c:	1c43      	adds	r3, r0, #1
 8001c6e:	d102      	bne.n	8001c76 <_sbrk_r+0x1a>
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	b103      	cbz	r3, 8001c76 <_sbrk_r+0x1a>
 8001c74:	6023      	str	r3, [r4, #0]
 8001c76:	bd38      	pop	{r3, r4, r5, pc}
 8001c78:	200000b0 	.word	0x200000b0

08001c7c <__malloc_lock>:
 8001c7c:	4801      	ldr	r0, [pc, #4]	; (8001c84 <__malloc_lock+0x8>)
 8001c7e:	f000 b811 	b.w	8001ca4 <__retarget_lock_acquire_recursive>
 8001c82:	bf00      	nop
 8001c84:	200000b4 	.word	0x200000b4

08001c88 <__malloc_unlock>:
 8001c88:	4801      	ldr	r0, [pc, #4]	; (8001c90 <__malloc_unlock+0x8>)
 8001c8a:	f000 b80c 	b.w	8001ca6 <__retarget_lock_release_recursive>
 8001c8e:	bf00      	nop
 8001c90:	200000b4 	.word	0x200000b4

08001c94 <_malloc_usable_size_r>:
 8001c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c98:	1f18      	subs	r0, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bfbc      	itt	lt
 8001c9e:	580b      	ldrlt	r3, [r1, r0]
 8001ca0:	18c0      	addlt	r0, r0, r3
 8001ca2:	4770      	bx	lr

08001ca4 <__retarget_lock_acquire_recursive>:
 8001ca4:	4770      	bx	lr

08001ca6 <__retarget_lock_release_recursive>:
 8001ca6:	4770      	bx	lr

08001ca8 <_init>:
 8001ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001caa:	bf00      	nop
 8001cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cae:	bc08      	pop	{r3}
 8001cb0:	469e      	mov	lr, r3
 8001cb2:	4770      	bx	lr

08001cb4 <_fini>:
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	bf00      	nop
 8001cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cba:	bc08      	pop	{r3}
 8001cbc:	469e      	mov	lr, r3
 8001cbe:	4770      	bx	lr
